name: '发布简历编辑器镜像'

on:
  # 触发器1：手动触发 (workflow_dispatch)
  # 允许在 GitHub Actions 页面手动运行此工作流，用于发布任意版本或测试。
  workflow_dispatch:
    inputs:
      image_name:
        description: '要构建的镜像名称'
        required: true
        type: string
        default: 'prisma-ai-resume-editor'
      dockerfile_path:
        description: 'Dockerfile 的路径'
        required: true
        type: string
        default: './docker/magic-resume/Dockerfile.CI'
      version_tag:
        description: '要推送的镜像版本标签 (例如 1.0.0)'
        required: true
        type: string

  workflow_call: # 允许此工作流被其他工作流调用
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
jobs:
  docker-publish:
    name: Build and Push Docker Image # 任务名称
    runs-on: ubuntu-latest # 运行环境
    # 设置此任务所需的权限
    permissions:
      contents: read # 读取仓库内容的权限，用于 checkout
      packages: write # 写入包的权限 (如果使用 GitHub Packages 作为镜像仓库)
      id-token: write # (可选) 如果使用云服务商（如 AWS, GCP）的 OIDC 认证，则需要此权限

    steps:
      # 步骤1：检出代码
      # 将当前仓库的代码下载到 Actions 的运行环境中。
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2：为 Docker 提取元数据 (如标签和注释)
      # 使用 docker/metadata-action 自动生成一系列有意义的 Docker 标签。
      - name: Extract metadata for Docker
        id: meta # 为此步骤设置一个 ID，方便后续引用其输出
        uses: docker/metadata-action@v5
        with:
          # 定义镜像的完整名称，格式为 '用户名/镜像名'
          images: onlyie/${{ github.event.inputs.image_name || 'prisma-ai-resume-editor' }}
          # 定义标签的生成规则，可以同时生成多个标签
          tags: |
            # type=semver,pattern={{version}}: 使用语义化版本标签, 例如 v1.2.3 -> 1.2.3
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

            # type=raw,value=...: 使用一个原始值作为标签。
            # enable=...: 这个规则只在满足条件时生效。
            # 此处表示，只有当工作流是手动触发时，才使用输入的 'version_tag' 作为标签。
            type=raw,value=${{ github.event.inputs.version_tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

            # 在默认分支(main)上构建时同时打 latest 标签
            type=raw,value=latest,enable={{is_default_branch}}

      # 步骤3：设置 QEMU
      # QEMU 是一个模拟器，用于在 Actions 的 x86 环境中模拟 ARM 等其他架构，是多平台构建的基础。
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤4：设置 Docker Buildx
      # Buildx 是一个 Docker CLI 插件，它利用 QEMU 实现了跨平台构建。
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤5：登录到 Docker Hub
      # 使用在仓库 Secrets 中预先配置好的用户名和密码安全地登录到 Docker Hub。
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤6：构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Docker 构建上下文的路径，'.' 表示项目根目录。
          context: .
          file: ${{ github.event.inputs.dockerfile_path || './docker/magic-resume/Dockerfile.CI' }}
          # 多平台构建，为不同平台的用户提供适配的镜像
          platforms: linux/amd64,linux/arm64
          # 设置为 true，表示在构建成功后将镜像推送到 Docker Hub。
          push: true
          # 使用步骤2 (id: meta) 生成的所有标签。
          tags: ${{ steps.meta.outputs.tags }}
          # 使用步骤2 (id: meta) 生成的元数据作为镜像的 labels。
          labels: ${{ steps.meta.outputs.labels }}
          # 启用 GitHub Actions 的缓存，可以显著加快后续的构建速度。
          cache-from: type=gha
          cache-to: type=gha,mode=max
