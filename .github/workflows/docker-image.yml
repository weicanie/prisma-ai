name: Docker Image CI # 工作流名称：Docker 镜像 CI

on:
    # workflow_dispatch 允许我们手动触发此工作流
    workflow_dispatch:
        # 定义手动触发时需要输入的参数
        inputs:
            node_version:
                description: '用于构建此镜像的 Node.js 版本。'
                type: choice # 输入类型为下拉选择
                required: true # 此参数为必填
                default: '20' # 默认值为 '20'
                options:
                    - '20' # 可选项
            tag_version:
                description: '要推送的镜像的标签版本。'
                type: string # 输入类型为字符串
                required: true # 此参数为必填
                default: 'latest' # 默认值为 'latest'

jobs:
    docker:
        runs-on: ubuntu-latest # 运行环境：使用最新的 Ubuntu 系统
        steps:
            # 步骤1：检出代码
            - name: Checkout
              uses: actions/checkout@v4.1.1
            
            # 步骤2：设置 QEMU
            # QEMU 用于模拟不同的 CPU 架构，是实现多平台构建的关键
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3.0.0
            
            # 步骤3：设置 Docker Buildx
            # Buildx 是一个 Docker CLI 插件，可以扩展构建功能，支持多平台构建
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3.0.0
            
            # 步骤4：登录到 Docker Hub
            # 使用预先在 GitHub Secrets 中配置好的用户名和令牌进行登录
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            
            # 步骤5：构建并推送镜像
            - name: Build and push
              uses: docker/build-push-action@v5.3.0
              with:
                  context: . # Docker 构建上下文的路径，. 表示项目根目录
                  file: ./docker/Dockerfile # 指定 Dockerfile 的路径
                  # 传递给 Dockerfile 的构建参数
                  build-args: |
                      NODE_VERSION=${{github.event.inputs.node_version}}
                  # 指定要构建的目标平台架构，这里同时构建 amd64 和 arm64
                  platforms: linux/amd64,linux/arm64
                  push: true # 构建完成后推送到镜像仓库
                  # 指定镜像的标签，格式为 '仓库名:标签'
                  # 标签从手动触发时输入的 `tag_version` 获取
                  tags: flowiseai/flowise:${{github.event.inputs.tag_version}}
