# syntax=docker/dockerfile:1

# 用于发布到dockerhub的Dockerfile

ARG NODE_VERSION=20.11.0
ARG PNPM_VERSION=9.15.4

FROM node:${NODE_VERSION} AS builder

# 设置生产环境
# ENV NODE_ENV=production

# 安装 pnpm 
RUN npm install -g pnpm@${PNPM_VERSION}

# 设置环境变量，跳过 puppeteer 下载浏览器
ENV PUPPETEER_SKIP_DOWNLOAD=true

# 设置工作目录（容器内部）
WORKDIR /app

# 为 sharp 设置国内镜像源，解决下载超时问题
# ENV SHARP_DIST_BASE_URL="https://npmmirror.com/mirrors/sharp-libvips"

# COPY 电脑文件系统 容器文件系统
# 复制整个monorepo的package.json和pnpm配置文件
COPY ./package.json ./pnpm-lock.yaml ./pnpm-workspace.yaml* ./

# 复制所有packages的package.json以便正确安装依赖
COPY ./packages/backend/package.json ./packages/backend/
COPY ./packages/shared/package.json ./packages/shared/

# 首先安装所有依赖
RUN pnpm install --frozen-lockfile

# 复制后端项目和共享包目录下所有文件（.dockerignore中忽略的文件不会被复制）
COPY ./packages/backend ./packages/backend
COPY ./packages/shared ./packages/shared


# 首先构建共享包
RUN pnpm --filter @prisma-ai/shared build

# 生成 Prisma 客户端（为了成功build）
RUN pnpm --filter backend exec prisma generate --no-engine

# 然后构建后端包
RUN pnpm --filter backend build

# 第二阶段：构建生产镜像
FROM node:${NODE_VERSION}

# 保持生产环境设置
# ENV NODE_ENV=production

WORKDIR /app

# 安装 pnpm 
RUN npm install -g pnpm@${PNPM_VERSION}

# 从构建阶段的镜像中复制package.json和lock文件
COPY --from=builder /app/package.json /app/pnpm-lock.yaml /app/pnpm-workspace.yaml* ./
COPY --from=builder /app/packages/backend/package.json ./packages/backend/
COPY --from=builder /app/packages/shared/package.json ./packages/shared/

#只安装生产依赖
RUN pnpm install --prod --frozen-lockfile

# 从构建阶段复制编译后的代码
COPY --from=builder /app/packages/backend/dist ./packages/backend/dist
COPY --from=builder /app/packages/shared/dist ./packages/shared/dist

# 复制其他需要的资源文件
# schema.prisma
COPY --from=builder /app/packages/backend/prisma ./packages/backend/prisma
# prompts
COPY --from=builder /app/packages/backend/ai_data ./packages/backend/ai_data
# 启动脚本
COPY --from=builder /app/packages/backend/scripts ./packages/backend/scripts
COPY --from=builder /app/packages/backend/agent_output ./packages/backend/agent_output

# 修复启动脚本可能的行结束符问题（Windows CRLF -> Unix LF）
RUN sed -i 's/\r$//' /app/packages/backend/scripts/start.sh

# 确保启动脚本有执行权限
RUN chmod +x /app/packages/backend/scripts/start.sh

# 生成 Prisma 客户端 (在启动命令中migrate)
RUN pnpm --filter backend exec prisma generate

# 将 /app/packages/backend目录及其所有内容的所有权递归地更改为 node 用户。
# 解决权限问题，允许 node 用户写入 node_modules（用于Prisma引擎）和 logs 等目录。
RUN chown -R node:node /app/packages/backend


# 切换到非root用户
USER node

# 暴露后端服务端口
EXPOSE 3003

# 启动服务 - 方案1：使用shell脚本
CMD ["bash", "/app/packages/backend/scripts/start.sh"]

# 启动服务 - 方案2：直接执行命令
# CMD ["sh", "-c", "cd /app && pnpm --filter backend exec prisma migrate deploy && node /app/packages/backend/dist/main.js"]