generator client {
  provider      = "prisma-client-js"
  // 提高兼容性
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  //使用自定义路径则需要修改代码中PrismaClient的import路径
  //默认路径:'@prisma/client'
  // output        = "../generated/client"
}

/**
 * generator docs {
 * provider = "node node_modules/prisma-docs-generator"
 * output   = "../generated/docs"
 * }
 */

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//用户
model user {
  id                Int                 @id @default(autoincrement())
  username          String              @unique(map: "username") @db.VarChar(50)
  password          String              @db.VarChar(500)
  create_at         DateTime?           @default(now()) @db.Timestamp(0)
  update_at         DateTime?           @default(now()) @db.Timestamp(0)
  email             String              @db.VarChar(100)
  article           article[]
  ai_conversation   ai_conversation[]
  user_project      user_project[]
  interview_summary interview_summary[]
}

model ai_conversation {
  id        Int       @id @default(autoincrement())
  keyname   String    @db.VarChar(100)
  label     String    @db.VarChar(100)
  content   Json?
  user_id   Int
  create_at DateTime? @default(now()) @db.Timestamp(0)
  update_at DateTime? @default(now()) @db.Timestamp(0)
  user      user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "user_id")
}

//面试题
model article {
  id                   Int       @id @default(autoincrement())
  link                 String    @unique @db.VarChar(500) // 题目链接（去掉query和hash）
  user_id              Int
  create_at            DateTime? @default(now()) @db.Timestamp(0)
  update_at            DateTime? @default(now()) @db.Timestamp(0)
  title                String    @db.LongText
  quiz_type            String    @db.VarChar(255) //题目考察方式（问答题、选择题）
  content              String    @db.LongText
  content_mindmap      String?   @db.LongText //用于生成思维导图的精炼后的内容
  user_note            String?   @db.LongText //用户笔记
  gist                 String    @db.LongText
  content_type         String    @db.VarChar(255) //题目内容类型（如javascript、css）
  job_type             String?   @db.VarChar(255) //职位类型（如前端、后端(默认java)、全栈）
  hard                 String    @db.VarChar(255) //难度（如1、2、2.5、3）
  anki_note_id         BigInt?   @db.BigInt //anki中对应笔记id
  time_create          DateTime? @default(now()) @db.Timestamp(0) //题目创建时间
  time_update          DateTime? @default(now()) @db.Timestamp(0) //题目更新时间
  interview_summary_id Int? //逻辑外键，用于关联面经（题库导入的面试题没有关联的面经）

  user user @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "article_ibfk_1")

  @@index([user_id], map: "user_id")
}

//面经（对应多个面试题）
model interview_summary {
  id           Int     @id @default(autoincrement())
  post_link    String? @unique @db.VarChar(500) //帖子链接
  content_hash String  @unique @db.VarChar(32) //帖子内容的 md5 hash

  turn          String? @db.VarChar(100) //面试轮次
  company_name  String? @db.VarChar(255) //公司唯一标识
  company_scale String? @db.VarChar(100) //公司规模

  job_type String  @db.VarChar(255) //岗位类型（如前端、后端(默认java)、全栈
  job_name String? @db.VarChar(255) //岗位名称
  job_link String? @db.VarChar(500) //岗位链接

  content String @db.LongText //面经内容

  user_id   Int
  create_at DateTime? @default(now()) @db.Timestamp(0)
  update_at DateTime? @default(now()) @db.Timestamp(0)
  user      user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "user_id")
  @@index([company_name], map: "company_name")
  @@index([job_type], map: "job_type")
}

//上传知识库的项目
model user_project {
  id           Int            @id @default(autoincrement())
  user_id      Int
  project_name String         @db.VarChar(255)
  project_file project_file[]
  user         user           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, project_name])
}

//项目文件
model project_file {
  id              Int                  @id @default(autoincrement())
  file_path       String               @db.VarChar(1024) // 文件相对于项目根目录的路径
  hash            String               @db.VarChar(256) // 文件内容的 SHA256 哈希值
  user_project_id Int
  user_project    user_project         @relation(fields: [user_project_id], references: [id], onDelete: Cascade)
  chunks          project_file_chunk[]

  // 在复合唯一索引中，只使用 file_path 字段的前 255 个字符来创建索引。
  // 这样既保留了字段的完整长度，又解决了索引超长的问题。
  @@unique([user_project_id, file_path(length: 255)])
}

//知识库中的项目文件块
model project_file_chunk {
  id              Int          @id @default(autoincrement())
  project_file_id Int
  vector_id       String       @unique @db.VarChar(255) // 文件块在向量数据库中的id
  project_file    project_file @relation(fields: [project_file_id], references: [id], onDelete: Cascade)

  @@index([project_file_id])
}
