{
  "output": {
    "stepAnalysis": "### **需求分析：步骤一 - 后端简历数据持久化 API 实现**\n\n**1. 核心目标**\n\n本步骤的核心目标是使用 NestJS 框架构建一套稳定、可靠的 RESTful API，用于对简历数据进行完整的 CRUD (创建、读取、更新、删除) 操作。此 API 将作为整个重构项目中唯一的简历数据来源（Single Source of Truth），为后续的前端开发提供数据持久化服务。数据将存储在服务器本地的单个 `db.json` 文件中，以满足项目“个人使用”和快速开发的核心要求。\n\n**2. 数据模型与存储**\n\n*   **数据结构:** API 的核心数据模型（`ResumeData`）必须严格遵循原项目 `src/config/initialResumeData.ts` 中定义的 TypeScript 类型。这包括 `basic`, `education`, `experience`, `projects`, `skillContent` 等所有字段。这将作为后续定义 DTO (Data Transfer Object) 的基础。\n*   **存储文件 (`db.json`):**\n    *   **位置:** 该文件应存储在 NestJS 项目根目录下的 `data/db.json`。服务启动时若目录或文件不存在，应能自动创建。\n    *   **内部结构:** `db.json` 的内容应为一个 JSON 对象，其结构为 `Record<string, ResumeData>`。其中，`key` 是简历的唯一ID (UUID)，`value` 是完整的简历数据对象。示例：\n        ```json\n        {\n          \"c8a9f3b2-b1e4-4a2d-8f6c-7e9b0d1a3c5d\": { ...ResumeData object... },\n          \"a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6\": { ...ResumeData object... }\n        }\n        ```\n\n**3. 功能性需求 (API 端点定义)**\n\n**3.1. `POST /api/resumes` - 创建简历**\n\n*   **描述:** 接收一份简历的初始数据，为其分配一个唯一的ID和时间戳，并将其存入 `db.json`。\n*   **请求体 (Request Body):** 必须是一个符合 `ResumeData` 结构的 JSON 对象。前端发送时**不应**包含 `id`, `createdAt`, `updatedAt` 字段，即使包含，服务器也必须忽略并重新生成。\n*   **处理流程:**\n    1.  使用 `class-validator` 验证请求体数据的有效性（例如，`title` 字段不能为空）。\n    2.  调用 `uuid` 库生成一个 V4 UUID作为简历的唯一 `id`。\n    3.  获取当前服务器时间，生成 ISO 8601 格式的字符串作为 `createdAt` 和 `updatedAt` 的值。\n    4.  将生成的 `id` 和时间戳与请求体数据合并，形成完整的 `ResumeData` 对象。\n    5.  以原子方式读取并更新 `db.json`，将新的简历条目添加进去。\n*   **成功响应 (Success):** `201 Created`。响应体必须包含完整且新创建的简历对象（包括服务器生成的 `id` 和时间戳）。\n*   **失败响应 (Error):**\n    *   `400 Bad Request`: 请求体验证失败。\n    *   `500 Internal Server Error`: 文件读写操作失败。\n\n**3.2. `GET /api/resumes` - 获取所有简历**\n\n*   **描述:** 从 `db.json` 中读取所有简历数据，并以列表形式返回。\n*   **处理流程:**\n    1.  读取 `db.json` 文件。\n    2.  将文件中的 JSON 对象（`Record<string, ResumeData>`）转换为一个 `ResumeData` 对象的数组。\n    3.  返回该数组。\n*   **成功响应 (Success):** `200 OK`。响应体为一个 JSON 数组。如果 `db.json` 为空或不存在，应返回一个空数组 `[]`。\n*   **失败响应 (Error):** `500 Internal Server Error`: 文件读取操作失败。\n\n**3.3. `GET /api/resumes/:id` - 获取单个简历**\n\n*   **描述:** 根据提供的简历ID，返回对应的简历数据。\n*   **URL 参数:** `id` (string) - 目标简历的 UUID。\n*   **处理流程:**\n    1.  读取 `db.json` 文件。\n    2.  在数据中查找与 URL 参数 `id` 匹配的简历。\n    3.  如果找到，返回该简历对象。\n    4.  如果未找到，必须抛出 NestJS 的 `NotFoundException`。\n*   **成功响应 (Success):** `200 OK`。响应体为找到的单个 `ResumeData` JSON 对象。\n*   **失败响应 (Error):**\n    *   `404 Not Found`: 未找到具有指定 `id` 的简历。\n    *   `500 Internal Server Error`: 文件读取操作失败。\n\n**3.4. `PUT /api/resumes/:id` - 更新简历**\n\n*   **描述:** 使用请求体中的数据完全替换指定ID的简历内容。\n*   **URL 参数:** `id` (string) - 目标简历的 UUID。\n*   **请求体 (Request Body):** 必须是一个完整的、有效的 `ResumeData` 结构的对象。\n*   **处理流程:**\n    1.  `class-validator` 验证请求体。\n    2.  原子性地读取 `db.json` 并查找指定 `id` 的简历。如果不存在，抛出 `NotFoundException`。\n    3.  获取当前服务器时间，更新 `updatedAt` 字段。\n    4.  用请求体中的数据替换原有的简历数据。**注意：** 必须保留原有的 `id` 和 `createdAt` 字段，不能被请求体覆盖。\n    5.  将更新后的整个数据结构原子性地写回 `db.json`。\n*   **成功响应 (Success):** `200 OK`。响应体为完整更新后的 `ResumeData` 对象。\n*   **失败响应 (Error):**\n    *   `400 Bad Request`: 请求体验证失败。\n    *   `404 Not Found`: 未找到具有指定 `id` 的简历。\n    *   `500 Internal Server Error`: 文件读写操作失败。\n\n**3.5. `DELETE /api/resumes/:id` - 删除简历**\n\n*   **描述:** 根据ID从 `db.json` 中永久删除一个简历条目。\n*   **URL 参数:** `id` (string) - 目标简历的 UUID。\n*   **处理流程:**\n    1.  原子性地读取 `db.json` 并检查指定 `id` 是否存在。如果不存在，抛出 `NotFoundException`。\n    2.  从数据结构中删除该 `id` 对应的键值对。\n    3.  将更新后的数据结构原子性地写回 `db.json`。\n*   **成功响应 (Success):** `204 No Content`。响应体为空。\n*   **失败响应 (Error):**\n    *   `404 Not Found`: 未找到具有指定 `id` 的简历。\n    *   `500 Internal Server Error`: 文件读写操作失败。\n\n**4. 非功能性需求**\n\n*   **NFR-1: 原子文件操作:** 对 `db.json` 的所有写操作（创建、更新、删除）必须是原子的，以防止在并发请求（虽然概率低）或进程中断时导致数据文件损坏。必须采用“读取 -> 内存修改 -> 写入临时文件 -> 安全重命名”的策略。\n*   **NFR-2: 输入验证:** 必须为 `POST` 和 `PUT` 请求创建 DTO，并使用 `class-validator` 和 `class-transformer` 库对所有传入数据进行严格的类型和内容校验。对于嵌套对象（如 `basic`, `education` 数组），必须使用 `@ValidateNested({ each: true })` 进行深度验证。\n*   **NFR-3: 错误处理:** API 必须遵循标准的 HTTP 语义。使用 NestJS 内置的异常过滤器，为客户端错误（如400, 404）和服务器错误（500）返回统一、明确的 JSON 格式错误信息。\n\n**5. 与项目中其他部分的关系**\n\n*   **上游依赖:** 无。这是第一个被执行的后端开发步骤。\n*   **下游消费者:** 此 API 是后续所有前端步骤（特别是步骤 5 和 6）的直接依赖。API 的 URL 结构、请求/响应体的数据模型以及错误处理机制一旦确定，将成为前后端之间的服务契约。任何对此契约的改动都需要与前端开发同步。",
    "implementationPlan": [
      {
        "stepDescription": "步骤 1: 初始化 NestJS 项目并安装核心依赖。使用 NestJS CLI 创建一个新的后端项目，并安装 `uuid` 用于生成唯一ID，`class-validator` 和 `class-transformer` 用于数据校验与转换。",
        "techStackList": [
          "NestJS CLI",
          "npm/yarn",
          "TypeScript",
          "uuid",
          "class-validator",
          "class-transformer"
        ],
        "challengesList": [
          "确保所有依赖项版本与 NestJS 的核心版本兼容。",
          "配置 `tsconfig.json` 以启用装饰器（decorators）和其他必要的 TypeScript 功能。"
        ],
        "questionsList": [
          "项目是否有统一的代码风格规范（如ESLint, Prettier配置）需要遵循？"
        ]
      },
      {
        "stepDescription": "步骤 2: 创建简历数据的 DTO (Data Transfer Objects)。根据 `src/config/initialResumeData.ts` 中的 `ResumeData` 类型，定义详细的 DTO 类。这将包括 `CreateResumeDto` 和 `UpdateResumeDto`，并为所有属性（包括嵌套对象和数组）添加 `class-validator` 装饰器以实现深度验证。",
        "techStackList": [
          "TypeScript",
          "class-validator",
          "class-transformer"
        ],
        "challengesList": [
          "为嵌套对象（如 `basic`）和对象数组（如 `education`, `projects`）正确配置 `@ValidateNested({ each: true })` 和 `@Type()` 装饰器，确保深层数据结构得到校验。",
          "处理复杂类型（如富文本HTML字符串）的校验规则，确保既安全又灵活。",
          "确保 DTO 定义与前端 `ResumeData` 类型完全同步，避免未来数据不匹配问题。"
        ],
        "questionsList": [
          "对于 `PUT` 请求，是期望一个完整的 `ResumeData` 对象还是一个可以部分更新的对象？（需求明确指出是“完全替换”，因此 DTO 需包含所有可编辑字段）。"
        ]
      },
      {
        "stepDescription": "步骤 3: 实现原子化的 JSON 文件存储服务。创建一个可注入的 `JsonStorageService`，专门负责对 `data/db.json` 文件的读写。写操作必须遵循“读取 -> 内存修改 -> 写入临时文件 -> 重命名”的原子模式，以防止数据损坏。服务启动时需检查并创建 `data` 目录和 `db.json` 文件。",
        "techStackList": [
          "Node.js `fs/promises` API",
          "NestJS Dependency Injection"
        ],
        "challengesList": [
          "健壮地实现原子写入逻辑，包括错误处理（例如，临时文件写入失败或重命名失败）。",
          "确保文件路径相对于项目根目录是正确的，无论服务从哪个目录启动。",
          "所有文件操作必须是异步的，避免阻塞 Node.js 事件循环。"
        ],
        "questionsList": [
          "当并发写入发生时，应采用何种锁定策略？（对于此项目，文件级操作的原子性已足够，无需实现复杂锁定机制）。"
        ]
      },
      {
        "stepDescription": "步骤 4: 创建 `Resumes` 模块、控制器和服务。使用 NestJS CLI 生成 `ResumesModule`, `ResumesController`, 和 `ResumesService`。在模块中正确组织和声明这些组件，并注入 `JsonStorageService` 到 `ResumesService` 中。",
        "techStackList": [
          "NestJS CLI",
          "NestJS Modules"
        ],
        "challengesList": [
          "确保依赖注入关系正确配置，`ResumesService` 能够成功访问 `JsonStorageService` 的实例。"
        ],
        "questionsList": []
      },
      {
        "stepDescription": "步骤 5: 实现创建简历 (POST /api/resumes) 的逻辑。在 `ResumesService` 中创建 `create` 方法，该方法接收 `CreateResumeDto`，生成 `id` (UUID V4)、`createdAt` 和 `updatedAt` 时间戳，组合成完整的简历对象，然后调用 `JsonStorageService` 持久化。控制器方法应返回 `201 Created` 状态码和新创建的完整简历对象。",
        "techStackList": [
          "NestJS (@Post, @Body)",
          "uuid",
          "JsonStorageService"
        ],
        "challengesList": [
          "确保服务器生成的字段（id, createdAt, updatedAt）会覆盖任何客户端可能意外传入的同名字段。",
          "时间戳格式必须严格遵守 ISO 8601 标准。"
        ],
        "questionsList": []
      },
      {
        "stepDescription": "步骤 6: 实现获取简历 (GET /api/resumes, GET /api/resumes/:id) 的逻辑。在 `ResumesService` 中实现 `findAll` 和 `findOne` 方法。`findAll` 返回所有简历的数组。`findOne` 根据 ID 查找简历，如果未找到，则必须抛出 NestJS 的 `NotFoundException` 以自动触发 `404 Not Found` 响应。",
        "techStackList": [
          "NestJS (@Get, @Param, NotFoundException)"
        ],
        "challengesList": [
          "对于 `findAll`，需要将从 `db.json` 读取的 `Record<string, ResumeData>` 对象转换为 `ResumeData[]` 数组。",
          "正确处理 `db.json` 文件不存在或为空的情况，`findAll` 应返回空数组 `[]`。"
        ],
        "questionsList": []
      },
      {
        "stepDescription": "步骤 7: 实现更新简历 (PUT /api/resumes/:id) 的逻辑。在 `ResumesService` 中实现 `update` 方法。该方法首先验证简历是否存在，若不存在则抛出 `NotFoundException`。然后，使用请求体中的数据完全替换原简历数据，但保留原有的 `id` 和 `createdAt`，并更新 `updatedAt` 字段。最后，调用 `JsonStorageService` 保存更改。",
        "techStackList": [
          "NestJS (@Put, @Param, @Body)"
        ],
        "challengesList": [
          "确保更新逻辑的正确性：必须保留原始的 `id` 和 `createdAt`，防止客户端篡改这些不可变数据。",
          "更新操作也必须是原子的，依赖 `JsonStorageService` 的原子写入能力。"
        ],
        "questionsList": []
      },
      {
        "stepDescription": "步骤 8: 实现删除简历 (DELETE /api/resumes/:id) 的逻辑。在 `ResumesService` 中实现 `remove` 方法。该方法先验证简历是否存在，不存在则抛出 `NotFoundException`。若存在，则从内存中的数据结构里删除该条目，并调用 `JsonStorageService` 将更新后的数据写回文件。控制器方法需配置为成功时返回 `204 No Content`。",
        "techStackList": [
          "NestJS (@Delete, @Param, @HttpCode(204))"
        ],
        "challengesList": [
          "确保控制器在成功删除后返回正确的 HTTP 状态码 `204` 且响应体为空。"
        ],
        "questionsList": []
      },
      {
        "stepDescription": "步骤 9: 全局配置和最终验证。在 `main.ts` 中，全局启用 `ValidationPipe`，并配置 `whitelist: true` 和 `forbidNonWhitelisted: true` 选项以增强安全性。设置全局 API 路由前缀为 `/api`。最后，通过 Postman 或类似的工具对所有 API 端点进行手动测试，确保其行为完全符合需求文档。",
        "techStackList": [
          "NestJS (`app.useGlobalPipes`, `app.setGlobalPrefix`)",
          "Postman/Insomnia"
        ],
        "challengesList": [
          "正确配置 `ValidationPipe` 以拒绝或剥离请求体中未在 DTO 中定义的额外字段。",
          "全面测试所有成功和失败的场景，包括无效输入（400）、资源未找到（404）和服务器内部错误（500）。"
        ],
        "questionsList": []
      }
    ]
  },
  "knowledge": {
    "retrievedProjectCodes": "src\\store\\useResumeStore.ts\nupdateResumeTitle: (title: string) => void;\n  updateBasicInfo: (data: Partial<BasicInfo>) => void;\n  updateEducation: (data: Education) => void;\n  updateEducationBatch: (educations: Education[]) => void;\n  deleteEducation: (id: string) => void;\n  updateExperience: (data: Experience) => void;\n  updateExperienceBatch: (experiences: Experience[]) => void;\n  deleteExperience: (id: string) => void;\n  updateProjects: (project: Project) => void;\n  updateProjectsBatch: (projects: Project[]) => void;\n  deleteProject: (id: string) => void;\n  setDraggingProjectId: (id: string | null) => void;\n  updateSkillContent: (skillContent: string) => void;\n  reorderSections: (newOrder: ResumeData[\"menuSections\"]) => void;\n  toggleSectionVisibility: (sectionId: string) => void;\n  setActiveSection: (sectionId: string) => void;\n  updateMenuSections: (sections: ResumeData[\"menuSections\"]) => void;\n  addCustomData: (sectionId: string) => void;\n  updateCustomData: (sectionId: string, items: CustomItem[]) => void;\n  removeCustomData: (sectionId: string) => void;\n  addCustomItem: (sectionId: string) => void;\n  updateCustomItem: (\n    sectionId: string,\n    itemId: string,\n    updates: Partial<CustomItem>\n  ) => void;\n  removeCustomItem: (sectionId: string, itemId: string) => void;\n  updateGlobalSettings: (settings: Partial<GlobalSettings>) => void;\n  setThemeColor: (color: string) => void;\n  setTemplate: (templateId: string) => void;\n  addResume: (resume: ResumeData) => string;\n}\n\n// 同步简历到文件系统\nsrc\\config\\initialResumeData.ts\nexport const initialResumeState = {\n  title: \"新建简历\",\n  basic: {\n    name: \"魔方\",\n    title: \"高级前端工程师\",\n    employementStatus: \"离职\",\n    email: \"zhangsan@example.com\",\n    phone: \"13800138000\",\n    location: \"北京市朝阳区\",\n    birthDate: \"1995-01\",\n    fieldOrder: DEFAULT_FIELD_ORDER,\n    icons: {\n      email: \"Mail\",\n      phone: \"Phone\",\n      birthDate: \"CalendarRange\",\n      employementStatus: \"Briefcase\",\n      location: \"MapPin\",\n    },\n    photoConfig: DEFAULT_CONFIG,\n    customFields: [\n      {\n        id: \"personal\",\n        label: \"个人网站\",\n        value: \"https://zhangsan.dev\",\n        icon: \"Globe\",\n      },\n    ],\n    photo: \"/avatar.png\",\n    githubKey: \"\",\n    githubUseName: \"\",\n    githubContributionsVisible: false,\n  },\n  education: [\n    {\n      id: \"1\",\n      school: \"北京大学\",\n      major: \"计算机科学与技术\",\n      degree: \"本科\",\n      startDate: \"2013-09\",\n      endDate: \"2017-06\",\n      visible: true,\n      gpa: \"\",\n      description: `<ul class=\"custom-list\">\n        <li>主修课程：数据结构、算法设计、操作系统、计算机网络、Web开发技术</li>\n        <li>专业排名前 5%，连续三年获得一等奖学金</li>\n        <li>担任计算机协会技术部部长，组织多次技术分享会</li>\n        <li>参与开源项目贡献，获得 GitHub Campus Expert 认证</li>\n      </ul>`,\n    },\n  ],\n  skillContent: `<div class=\"skill-content\">\n  <ul class=\"custom-list\">\n    <li>前端框架：熟悉 React、Vue.js，熟悉 Next.js、Nuxt.js 等 SSR 框架</li>\n    <li>开发语言：TypeScript、JavaScript(ES6+)、HTML5、CSS3</li>\n    <li>UI/样式：熟悉 TailwindCSS、Sass/Less、CSS Module、Styled-components</li>\nsrc\\store\\useResumeStore.ts\n(async () => {\n          try {\n            const handle = await getFileHandle(\"syncDirectory\");\n            if (!handle) return;\n\n            const hasPermission = await verifyPermission(handle);\n            if (!hasPermission) return;\n\n            const dirHandle = handle as FileSystemDirectoryHandle;\n            try {\n              await dirHandle.removeEntry(`${resume.title}.json`);\n            } catch (error) {}\n          } catch (error) {\n            console.error(\"Error deleting resume file:\", error);\n          }\n        })();\n      },\n\n      duplicateResume: (resumeId) => {\n        const newId = generateUUID();\n        const originalResume = get().resumes[resumeId];\n\n        // 获取当前语言环境\n        const locale =\n          typeof document !== \"undefined\"\n            ? document.cookie\n                .split(\"; \")\n                .find((row) => row.startsWith(\"NEXT_LOCALE=\"))\n                ?.split(\"=\")[1] || \"zh\"\n            : \"zh\";\n\n        const duplicatedResume = {\n          ...originalResume,\n          id: newId,\n          title: `${originalResume.title} (${\n            locale === \"en\" ? \"Copy\" : \"复制\"\n          })`,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n\n        set((state) => ({\n          resumes: {\n            ...state.resumes,\n            [newId]: duplicatedResume,\n          },\n          activeResumeId: newId,\n          activeResume: duplicatedResume,\n        }));\nsrc\\store\\useResumeStore.ts\nexport const useResumeStore = create(\n  persist<ResumeStore>(\n    (set, get) => ({\n      resumes: {},\n      activeResumeId: null,\n      activeResume: null,\n\n      createResume: (templateId = null) => {\n        const locale =\n          typeof document !== \"undefined\"\n            ? document.cookie\n                .split(\"; \")\n                .find((row) => row.startsWith(\"NEXT_LOCALE=\"))\n                ?.split(\"=\")[1] || \"zh\"\n            : \"zh\";\n\n        const initialResumeData =\n          locale === \"en\" ? initialResumeStateEn : initialResumeState;\n\n        const id = generateUUID();\n        const template = templateId\n          ? DEFAULT_TEMPLATES.find((t) => t.id === templateId)\n          : DEFAULT_TEMPLATES[0];\n\n        const newResume: ResumeData = {\n          ...initialResumeData,\n          id,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          templateId: template?.id,\n          title: `${locale === \"en\" ? \"New Resume\" : \"新建简历\"} ${id.slice(\n            0,\n            6\n          )}`,\n        };\n\n        set((state) => ({\n          resumes: {\n            ...state.resumes,\n            [id]: newResume,\n          },\n          activeResumeId: id,\n          activeResume: newResume,\n        }));\n\n        syncResumeToFile(newResume);\n\n        return id;\n      },\n\n      updateResume: (resumeId, data) => {\n        set((state) => {\n          const resume = state.resumes[resumeId];\n          if (!resume) return state;\nsrc\\app\\app\\dashboard\\resumes\\page.tsx\nif (Object.keys(resumes).length === 0) {\n      syncResumesFromFiles();\n    }\n  }, [resumes, updateResume]);\n\n  useEffect(() => {\n    const loadSavedConfig = async () => {\n      try {\n        const handle = await getFileHandle(\"syncDirectory\");\n        const path = await getConfig(\"syncDirectoryPath\");\n        if (handle && path) {\n          setHasConfiguredFolder(true);\n        }\n      } catch (error) {\n        console.error(\"Error loading saved config:\", error);\n      }\n    };\n\n    loadSavedConfig();\n  }, []);\n\n  const handleCreateResume = () => {\n    const newId = createResume(null);\n    setActiveResume(newId);\n  };\n\n  const handleImportJson = () => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \".json\";\n\n    input.onchange = async (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n\n      try {\n        const content = await file.text();\n        const config = JSON.parse(content);\n\n        const newResume = {\n          ...initialResumeState,\n          ...config,\n          id: generateUUID(),\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        };\n\n        addResume(newResume);\n        toast.success(t(\"dashboard.resumes.importSuccess\"));\n      } catch (error) {\n        console.error(\"Import error:\", error);\n        toast.error(t(\"dashboard.resumes.importError\"));\n      }\n    };\n\n    input.click();\n  };\nsrc\\store\\useResumeStore.ts\nreturn id;\n      },\n\n      updateResume: (resumeId, data) => {\n        set((state) => {\n          const resume = state.resumes[resumeId];\n          if (!resume) return state;\n\n          const updatedResume = {\n            ...resume,\n            ...data,\n          };\n\n          syncResumeToFile(updatedResume, resume);\n\n          return {\n            resumes: {\n              ...state.resumes,\n              [resumeId]: updatedResume,\n            },\n            activeResume:\n              state.activeResumeId === resumeId\n                ? updatedResume\n                : state.activeResume,\n          };\n        });\n      },\n\n      // 从文件更新，直接更新resumes\n      updateResumeFromFile: (resume) => {\n        set((state) => ({\n          resumes: {\n            ...state.resumes,\n            [resume.id]: resume,\n          },\n        }));\n      },\n\n      updateResumeTitle: (title) => {\n        const { activeResumeId } = get();\n        if (activeResumeId) {\n          get().updateResume(activeResumeId, { title });\n        }\n      },\n\n      deleteResume: (resume) => {\n        const resumeId = resume.id;\n        set((state) => {\n          const { [resumeId]: _, activeResume, ...rest } = state.resumes;\n          return {\n            resumes: rest,\n            activeResumeId: null,\n            activeResume: null,\n          };\n        });\n\n        (async () => {\n          try {\n            const handle = await getFileHandle(\"syncDirectory\");\n            if (!handle) return;\nsrc\\store\\useResumeStore.ts\nimport { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { getFileHandle, verifyPermission } from \"@/utils/fileSystem\";\nimport {\n  BasicInfo,\n  Education,\n  Experience,\n  GlobalSettings,\n  Project,\n  CustomItem,\n  ResumeData,\n  MenuSection,\n} from \"../types/resume\";\nimport { DEFAULT_TEMPLATES } from \"@/config\";\nimport {\n  initialResumeState,\n  initialResumeStateEn,\n} from \"@/config/initialResumeData\";\nimport { generateUUID } from \"@/utils/uuid\";\ninterface ResumeStore {\n  resumes: Record<string, ResumeData>;\n  activeResumeId: string | null;\n  activeResume: ResumeData | null;\n\n  createResume: (templateId: string | null) => string;\n  deleteResume: (resume: ResumeData) => void;\n  duplicateResume: (resumeId: string) => string;\n  updateResume: (resumeId: string, data: Partial<ResumeData>) => void;\n  setActiveResume: (resumeId: string) => void;\n  updateResumeFromFile: (resume: ResumeData) => void;\nsrc\\config\\initialResumeData.ts\nexport const initialResumeStateEn = {\n  title: \"New Resume\",\n  basic: {\n    name: \"John Smith\",\n    title: \"Senior Frontend Engineer\",\n    employementStatus: \"Available\",\n    email: \"john.smith@123.com\",\n    phone: \"555-123-4567\",\n    location: \"San Francisco, CA\",\n    birthDate: \"\",\n    fieldOrder: DEFAULT_FIELD_ORDER,\n    icons: {\n      email: \"Mail\",\n      phone: \"Phone\",\n      birthDate: \"CalendarRange\",\n      employementStatus: \"Briefcase\",\n      location: \"MapPin\",\n    },\n    photoConfig: DEFAULT_CONFIG,\n    customFields: [],\n    photo: \"/avatar.png\",\n    githubKey: \"\",\n    githubUseName: \"\",\n    githubContributionsVisible: false,\n  },\n  education: [\n    {\n      id: \"1\",\n      school: \"Stanford University\",\n      major: \"Computer Science\",\n      degree: \"\",\n      startDate: \"2013-09\",\n      endDate: \"2017-06\",\n      visible: true,\n      gpa: \"\",\n      description: `<ul class=\"custom-list\">\n        <li>Core courses: Data Structures, Algorithms, Operating Systems, Computer Networks, Web Development</li>\n        <li>Top 5% of class, received Dean's List honors for three consecutive years</li>\n        <li>Served as Technical Director of the Computer Science Association, organized multiple tech workshops</li>\n        <li>Contributed to open-source projects, earned GitHub Campus Expert certification</li>\n      </ul>`,\n    },\n  ],\n  skillContent: `<div class=\"skill-content\">\n  <ul class=\"custom-list\">\nsrc\\i18n\\locales\\zh.json\n{\n  \"common\": {\n    \"title\": \"魔方简历\",\n    \"subtitle\": \"AI 驱动简历编辑器\",\n    \"description\": \"魔方简历是一款开源的简历编辑器，免费，隐私优先。无需注册登录，数据完全存储在本地，支持数据导出备份，确保您的简历数据随时可用。\",\n    \"dashboard\": \"仪表盘\",\n    \"edit\": \"编辑\",\n    \"delete\": \"删除\",\n    \"newResume\": \"新建简历\",\n    \"copy\": \"复制\"\n  },\n  \"home\": {\n    \"header\": {\n      \"title\": \"魔方简历\",\n      \"startButton\": \"开始使用\",\n      \"features\": \"功能特点\",\n      \"pricing\": \"定价\",\n      \"about\": \"关于我们\",\n      \"login\": \"登录\",\n      \"register\": \"注册\",\n      \"dashboard\": \"控制台\"\n    },\n    \"hero\": {\n      \"badge\": \"免费简历创作\",\n      \"title\": \"让简历创作变得简单而智能\",\n      \"subtitle\": \"魔方简历利用 AI 技术，帮助您快速创建专业的简历。无需注册，免费使用，数据安全存储。\",\n      \"cta\": \"立即开始\",\n      \"secondary\": \"浏览模板\"\n    },\n    \"features\": {\n      \"title\": \"为什么选择魔方简历？\",\n      \"subtitle\": \"我们提供一站式简历解决方案，让您的求职之路更加顺畅\",\n      \"ai\": {\n        \"badge\": \"AI 智能纠错\",\n        \"title\": \"智能识别，专业建议\",\n        \"description\": \"内置智能语法检查，自动识别不恰当的表达，提供专业的修改建议，让您的简历更加出色。\",\n        \"item1\": \"智能润色\",\n        \"item1_description\": \"AI 自动优化文案表达，让简历更专业\",\n        \"item2\": \"语法检查\",\n        \"item2_description\": \"自动检测并修正语法和拼写错误\"\n      },\n      \"storage\": {\n        \"badge\": \"本地存储\",\n        \"title\": \"数据安全，隐私优先\",\n        \"description\": \"所有简历数据完全存储在您的本地设备中，无需担心隐私泄露。支持数据导出备份，确保您的简历数据随时可用。\",\n        \"item1\": \"本地文件存储\",\n        \"item1_description\": \"简历数据安全存储在您的电脑硬盘中\",\n        \"item2\": \"多种导出格式\",\n        \"item2_description\": \"支持PDF和JSON格式导出\",\n        \"item3\": \"支持数据导出备份\"\n      },\n      \"preview\": {\n        \"badge\": \"实时预览\",\n        \"title\": \"所见即所得\",\n        \"description\": \"边编辑边预览，实时查看简历效果。支持多种专业模板，让您的简历既美观又规范。快速导出PDF，随时投递简历。\",\n        \"item1\": \"实时预览编辑效果\",\n        \"item2\": \"多种导出格式支持\"\n      }\n    },\n    \"news\": {\n      \"label\": \"新闻\",\n      \"content\": \" 全新的 AI 简历优化功能已上线\"\n    },\n    \"cta\": {\n      \"title\": \"开启你的新职业篇章\",\n      \"description\": \"立即使用魔方简历，创建一份令人印象深刻的简历\",\n      \"button\": \"免费开始使用\"\n    },\n    \"footer\": {\n      \"copyright\": \" 2025 魔方简历. 保留所有权利.\"\n    },\n    \"changelog\": \"更新日志\",\n    \"faq\": {\n      \"title\": \"常见问题\",\n      \"items\": [\n        {\n          \"question\": \"使用魔方简历需要付费吗？\",\n          \"answer\": \"魔方简历目前是免费的，满足基础简历制作需求，开源版本的功能不会变更，导出PDF功能也永远不会收费。\"\n        },\n        {\n          \"question\": \"我的简历数据安全吗？\",\n          \"answer\": \"是的，非常安全。魔方简历采用本地存储方式，您的所有数据都保存在您自己的设备上，不存在云存储，完全保护您的隐私。\"\n        },\n        {\n          \"question\": \"支持哪些简历格式导出？\",\n          \"answer\": \"目前支持导出PDF格式，确保您的简历在任何设备上都能保持一致的排版效果。未来我们还将支持更多导出格式。\"\n        },\n        {\n          \"question\": \"多设备如何同步\",\n          \"answer\": \"我们提供了导出JSON配置，您可以将简历的配置以JSON格式保存，随时随地，任何设备上都可以打开查看。\"\n        },\n        {\n          \"question\": \"自定义程度如何？\",\n          \"answer\": \"我们提供丰富的自定义操作，包括颜色、布局等，让您能够根据个人喜好和行业特点调整简历风格。\"\n        }\n      ]\n    }\n  },\n  \"dashboard\": {\n    \"sidebar\": {\n      \"resumes\": \"我的简历\",\n      \"settings\": \"通用设置\",\n      \"templates\": \"简历模板\",\n      \"ai\": \"AI服务商\"\n    },\n    \"resumes\": {\n      \"created\": \"创建于\",\n      \"synced\": \"已备份文件夹\",\n      \"view\": \"去查看\",\n      \"myResume\": \"我的简历\",\n      \"create\": \"新建简历\",\n      \"newResume\": \"新建简历\",\n      \"newResumeDescription\": \"创建一个新简历以开始。\",\n      \"import\": \"导入 JSON 配置\",\n      \"untitled\": \"未命名简历\",\n      \"importSuccess\": \"配置导入成功\",\n      \"importError\": \"配置导入失败，请检查文件格式\",\n      \"notice\": {\n        \"title\": \"注意\",\n        \"description\": \"建议在设置里中配置简历备份文件夹，防止您的数据可能会在浏览器清除缓存后丢失\",\n        \"goToSettings\": \"前往设置\"\n      }\n    },\n    \"settings\": {\n      \"title\": \"设置\",\n      \"syncDirectory\": {\n        \"title\": \"同步目录\",\n        \"description\": \"选择一个文件夹来同步和备份您的简历。\",\n        \"currentSyncFolder\": \"当前同步文件夹\",\n        \"noFolderConfigured\": \"尚未配置同步文件夹\",\n        \"changeFolder\": \"更改文件夹\",\n        \"selectFolder\": \"选择文件夹\"\n      },\n      \"sync\": {\n        \"title\": \"同步目录\",\n        \"description\": \"选择一个文件夹来同步和备份您的简历。\",\n        \"select\": \"选择文件夹\"\n      },\n      \"ai\": {\n        \"title\": \"AI 配置\",\n        \"currentModel\": \"当前使用的模型\",\n        \"selectModel\": \"选择模型\",\n        \"getApiKey\": \"获取 API Key\",\n        \"doubao\": {\n          \"title\": \"豆包\",\n          \"description\": \"在火山引擎获取 API 密钥\",\n          \"apiKey\": \"API Key\",\n          \"modelId\": \"模型 ID\"\n        },\n        \"deepseek\": {\n          \"title\": \"DeepSeek\",\n          \"description\": \"在 DeepSeek 开放平台获取 API 密钥\",\n          \"apiKey\": \"API Key\"\n        },\n        \"openai\": {\n          \"title\": \"OpenAI\",\n          \"description\": \"在 OpenAI 或兼容 OpenAI 格式的开放平台获取 API 密钥\",\n          \"apiKey\": \"API Key\",\n          \"modelId\": \"模型 ID\",\n          \"apiEndpoint\": \"API 端点，如：https://openai.example.org/v1\"\n        }\n      }\n    },\n    \"templates\": {\n      \"title\": \"模板\",\n      \"useTemplate\": \"使用此模板\",\n      \"preview\": \"预览\",\n      \"switchTemplate\": \"切换模版\",\n      \"classic\": {\n        \"name\": \"经典模板\",\n        \"description\": \"传统简约的简历布局，适合大多数求职场景\"\n      },\n      \"modern\": {\n        \"name\": \"两栏布局\",\n        \"description\": \"经典两栏，突出个人特色\"\n      },\n      \"leftRight\": {\n        \"name\": \"模块标题背景色\",\n        \"description\": \"模块标题背景鲜明，突出美观特色\"\n      },\n      \"timeline\": {\n        \"name\": \"时间轴布局\",\n        \"description\": \"时间轴风格，突出经历的时间顺序\"\n      }\n    }\n  },\n  \"pdfExport\": {\n    \"button\": {\n      \"export\": \"导出\",\n      \"exportPdf\": \"PDF(服务端)\",\n      \"exportJson\": \"JSON配置\",\n      \"exporting\": \"导出中...\",\n      \"exportingJson\": \"导出中...\",\n      \"print\": \"PDF(浏览器打印)\"\n    },\n    \"toast\": {\n      \"success\": \"PDF导出成功\",\n      \"error\": \"PDF导出失败\",\n      \"jsonSuccess\": \"配置导出成功\",\n      \"jsonError\": \"配置导出失败\"\n    }\n  },\n  \"workbench\": {\n    \"sidePanel\": {\n      \"layout\": {\n        \"title\": \"布局\",\n        \"addCustomSection\": \"添加自定义模块\"\n      },\n      \"theme\": {\n        \"title\": \"主题色\",\n        \"custom\": \"自定义\"\n      },\n      \"typography\": {\n        \"title\": \"排版\",\n        \"font\": {\n          \"title\": \"字体\",\n          \"sans\": \"无衬线体\",\n          \"serif\": \"衬线体\",\n          \"mono\": \"等宽体\"\n        },\n        \"lineHeight\": {\n          \"title\": \"行高\",\n          \"normal\": \"默认\",\n          \"relaxed\": \"适中\",\n          \"loose\": \"宽松\"\n        },\n        \"baseFontSize\": {\n          \"title\": \"基础字号\"\n        },\n        \"headerSize\": {\n          \"title\": \"模块标题字号\"\n        },\n        \"subheaderSize\": {\n          \"title\": \"模块项一级标题字号\"\n        }\n      },\n      \"spacing\": {\n        \"title\": \"间距\",\n        \"pagePadding\": {\n          \"title\": \"页边距\"\n        },\n        \"sectionSpacing\": {\n          \"title\": \"模块间距\"\n        },\n        \"paragraphSpacing\": {\n          \"title\": \"段落间距\"\n        }\n      },\n      \"mode\": {\n        \"title\": \"模式\",\n        \"useIconMode\": {\n          \"title\": \"图标模式\"\n        },\n        \"centerSubtitle\": {\n          \"title\": \"副标题居中\"\n        }\n      }\n    },\n    \"basicPanel\": {\n      \"title\": \"资料\",\n      \"basicField\": \"基础字段\",\n      \"customField\": \"自定义字段\",\n      \"githubContributions\": \"Github贡献\",\n      \"layout\": \"布局\",\n      \"layoutLeft\": \"居左\",\n      \"layoutCenter\": \"居中\",\n      \"layoutRight\": \"居右\",\n      \"avatar\": \"头像\",\n      \"customFields\": {\n        \"placeholders\": {\n          \"label\": \"标签\",\n          \"value\": \"值\"\n        },\n        \"addButton\": \"添加自定义字段\"\n      },\n      \"basicFields\": {\n        \"name\": \"姓名\",\n        \"title\": \"职位\",\n        \"email\": \"邮箱\",\n        \"phone\": \"电话\",\n        \"website\": \"个人网站\",\n        \"location\": \"地址\",\n        \"birthDate\": \"生日\",\n        \"employementStatus\": \"状态\"\n      },\n      \"fieldVisibility\": {\n        \"show\": \"显示\",\n        \"hide\": \"隐藏\"\n      }\n    },\n    \"experiencePanel\": {\n      \"title\": \"工作经历\",\n      \"addButton\": \"添加工作经历\",\n      \"defaultProject\": {\n        \"company\": \"某科技有限公司\",\n        \"position\": \"高级前端工程师\",\n        \"date\": \"2020-至今\",\n        \"details\": \"负责公司核心产品...\"\n      },\n      \"placeholders\": {\n        \"company\": \"请输入公司名称\",\n        \"position\": \"请输入职位\",\n        \"date\": \"请输入工作时间\",\n        \"details\": \"请输入工作职责和成就\"\n      }\n    },\n    \"experienceItem\": {\n      \"labels\": {\n        \"company\": \"公司名称\",\n        \"position\": \"岗位\",\n        \"date\": \"工作时间\",\n        \"details\": \"工作职责\"\n      },\n      \"placeholders\": {\n        \"company\": \"请输入公司名称\",\n        \"position\": \"如：前端工程师\",\n        \"date\": \"如：2020-至今\",\n        \"details\": \"描述你在这份工作中的职责和成就\"\n      },\n      \"buttons\": {\n        \"edit\": \"编辑\",\n        \"save\": \"保存\",\n        \"cancel\": \"取消\",\n        \"delete\": \"删除\"\n      },\n      \"visibility\": {\n        \"show\": \"显示\",\n        \"hide\": \"隐藏\"\n      }\n    },\n    \"projectPanel\": {\n      \"title\": \"项目经历\",\n      \"addButton\": \"添加项目\",\n      \"defaultProject\": {\n        \"name\": \"个人项目\",\n        \"description\": \"项目描述\",\n        \"role\": \"负责内容\",\n        \"technologies\": \"技术栈\",\n        \"date\": \"2023.01 - 2023.06\"\n      },\n      \"placeholders\": {\n        \"name\": \"项目名称\",\n        \"description\": \"简要描述项目背景和目标\",\n        \"role\": \"你在项目中的角色和职责\",\n        \"technologies\": \"使用的技术和工具\",\n        \"date\": \"项目时间范围\",\n        \"link\": \"项目链接\"\n      }\n    },\n    \"projectItem\": {\n      \"labels\": {\n        \"name\": \"项目名称\",\n        \"role\": \"项目角色\",\n        \"date\": \"项目时间\",\n        \"description\": \"项目描述\",\n        \"link\": \"项目链接\"\n      },\n      \"placeholders\": {\n        \"name\": \"请输入项目名称\",\n        \"role\": \"你在项目中的角色\",\n        \"date\": \"项目时间范围\",\n        \"description\": \"简要描述项目背景和目标\",\n        \"link\": \"项目链接（可选）\"\n      },\n      \"buttons\": {\n        \"edit\": \"编辑\",\n        \"save\": \"保存\",\n        \"cancel\": \"取消\",\n        \"delete\": \"删除\"\n      },\n      \"visibility\": {\n        \"show\": \"显示\",\n        \"hide\": \"隐藏\"\n      }\n    },\n    \"educationPanel\": {\n      \"title\": \"教育背景\",\n      \"addButton\": \"添加教育经历\",\n      \"defaultProject\": {\n        \"school\": \"学校名称\",\n        \"degree\": \"学历\",\n        \"major\": \"专业\",\n        \"date\": \"2020.09 - 2024.06\"\n      },\n      \"placeholders\": {\n        \"school\": \"请输入学校名称\",\n        \"degree\": \"请选择学历\",\n        \"major\": \"请输入专业名称\",\n        \"date\": \"请输入就读时间范围\"\n      }\n    },\n    \"educationItem\": {\n      \"labels\": {\n        \"school\": \"学校名称\",\n        \"degree\": \"学历\",\n        \"major\": \"专业\",\n        \"date\": \"就读时间\",\n        \"description\": \"学校简介\",\n        \"gpa\": \"GPA\",\n        \"startDate\": \"开始时间\",\n        \"endDate\": \"结束时间\"\n      },\n      \"placeholders\": {\n        \"school\": \"请输入学校名称\",\n        \"degree\": \"请选择学历\",\n        \"major\": \"请输入专业名称\",\n        \"date\": \"请输入就读时间范围\",\n        \"description\": \"请输入学校简介\",\n        \"gpa\": \"请输入GPA\"\n      },\n      \"buttons\": {\n        \"edit\": \"编辑\",\n        \"save\": \"保存\",\n        \"cancel\": \"取消\",\n        \"delete\": \"删除\"\n      },\n      \"visibility\": {\n        \"show\": \"显示\",\n        \"hide\": \"隐藏\"\n      }\n    }\n  },\n  \"field\": {\n    \"selectDate\": \"选择日期\",\n    \"enterYear\": \"输入年份\"\n  },\n  \"richEditor\": {\n    \"bold\": \"加粗\",\n    \"italic\": \"斜体\",\n    \"underline\": \"下划线\",\n    \"textColor\": \"文字颜色\",\n    \"backgroundColor\": \"背景颜色\",\n    \"alignLeft\": \"左对齐\",\n    \"alignCenter\": \"居中对齐\",\n    \"alignRight\": \"右对齐\",\n    \"alignJustify\": \"两端对齐\",\n    \"bulletList\": \"无序列表\",\n    \"orderedList\": \"有序列表\",\n    \"undo\": \"撤销\",\n    \"redo\": \"重做\",\n    \"aiPolish\": \"AI 润色\",\n    \"paragraph\": \"正文\",\n    \"heading1\": \"标题 1\",\n    \"heading2\": \"标题 2\",\n    \"heading3\": \"标题 3\",\n    \"colors\": {\n      \"black\": \"黑色\",\n      \"darkGray\": \"深灰\",\n      \"gray\": \"灰色\",\n      \"red\": \"红色\",\n      \"orange\": \"橙色\",\n      \"orangeYellow\": \"橙黄\",\n      \"yellow\": \"黄色\",\n      \"yellowGreen\": \"黄绿\",\n      \"green\": \"绿色\",\n      \"cyan\": \"青色\",\n      \"lightBlue\": \"浅蓝\",\n      \"blue\": \"蓝色\",\n      \"purple\": \"紫色\",\n      \"magenta\": \"紫红\",\n      \"pink\": \"粉色\"\n    }\n  },\n  \"iconSelector\": {\n    \"all\": \"全部\",\n    \"searchPlaceholder\": \"搜索图标...\",\n    \"noMatchingIcons\": \"未找到匹配的图标\",\n    \"tryOtherKeywords\": \"请尝试其他搜索关键词\",\n    \"selectOtherCategory\": \"请选择其他分类\",\n    \"categories\": {\n      \"personal\": \"个人信息\",\n      \"education\": \"教育背景\",\n      \"experience\": \"工作经验\",\n      \"skills\": \"技能\",\n      \"languages\": \"语言\",\n      \"projects\": \"项目\",\n      \"achievements\": \"成就证书\",\n      \"hobbies\": \"兴趣爱好\",\n      \"social\": \"社交媒体\",\n      \"others\": \"其他\"\n    },\n    \"icons\": {\n      \"user\": \"用户\",\n      \"email\": \"邮箱\",\n      \"phone\": \"电话\",\n      \"address\": \"地址\",\n      \"website\": \"网站\",\n      \"mobile\": \"手机\",\n      \"education\": \"学历\",\n      \"school\": \"学校\",\n      \"major\": \"专业\",\n      \"library\": \"图书馆\",\n      \"scholarship\": \"奖学金\",\n      \"work\": \"工作\",\n      \"company\": \"公司\",\n      \"office\": \"办公室\",\n      \"dateRange\": \"日期范围\",\n      \"workTime\": \"工作时间\",\n      \"programming\": \"编程\",\n      \"system\": \"系统\",\n      \"database\": \"数据库\",\n      \"terminal\": \"终端\",\n      \"techStack\": \"技术栈\",\n      \"language\": \"语言\",\n      \"speaking\": \"口语\",\n      \"communication\": \"交流\",\n      \"project\": \"项目\",\n      \"branch\": \"分支\",\n      \"release\": \"发布\",\n      \"target\": \"目标\",\n      \"trophy\": \"奖杯\",\n      \"medal\": \"奖牌\",\n      \"star\": \"星级\",\n      \"interest\": \"兴趣\",\n      \"music\": \"音乐\",\n      \"art\": \"艺术\",\n      \"photography\": \"摄影\",\n      \"linkedin\": \"领英\",\n      \"twitter\": \"推特\",\n      \"facebook\": \"脸书\",\n      \"instagram\": \"照片\",\n      \"profile\": \"简介\",\n      \"review\": \"审核\",\n      \"filter\": \"筛选\",\n      \"link\": \"链接\",\n      \"salary\": \"薪资\",\n      \"idea\": \"创意\",\n      \"send\": \"发送\",\n      \"share\": \"分享\",\n      \"settings\": \"设置\",\n      \"search\": \"搜索\",\n      \"flag\": \"标记\",\n      \"bookmark\": \"收藏\",\n      \"thumbsUp\": \"点赞\",\n      \"skill\": \"技能\"\n    }\n  },\n  \"photoConfig\": {\n    \"title\": \"头像设置\",\n    \"description\": \"自定义您的简历头像\",\n    \"upload\": {\n      \"title\": \"在线链接\",\n      \"dragHint\": \"拖拽或点击上传图片\",\n      \"sizeLimit\": \"图片大小不能超过2MB\",\n      \"typeLimit\": \"请上传图片文件\",\n      \"urlPlaceholder\": \"输入图片链接\",\n      \"invalidUrl\": \"图片链接无效或无法访问，请尝试使用其他图片链接\",\n      \"timeout\": \"加载超时\",\n      \"loadError\": \"图片加载失败\"\n    },\n    \"config\": {\n      \"aspectRatio\": \"宽高比\",\n      \"size\": \"尺寸\",\n      \"width\": \"宽度\",\n      \"height\": \"高度\",\n      \"border-radius\": \"圆角\",\n      \"widthPlaceholder\": \"宽度\",\n      \"heightPlaceholder\": \"高度\",\n      \"ratios\": {\n        \"1:1\": \"1:1 正方形\",\n        \"4:3\": \"4:3 横版\",\n        \"3:4\": \"3:4 竖版\",\n        \"16:9\": \"16:9 宽屏\",\n        \"custom\": \"自定义\"\n      },\n      \"borderRadius\": {\n        \"none\": \"无\",\n        \"medium\": \"中等\",\n        \"full\": \"圆形\",\n        \"custom\": \"自定义\",\n        \"customPlaceholder\": \"自定义圆角大小\"\n      }\n    },\n    \"actions\": {\n      \"reset\": \"重置\",\n      \"close\": \"关闭\",\n      \"cancel\": \"取消\",\n      \"removePhoto\": \"删除头像\"\n    }\n  },\n  \"previewDock\": {\n    \"switchTemplate\": \"切换模版\",\n    \"grammarCheck\": {\n      \"idle\": \"AI语法纠错\",\n      \"checking\": \"检查中...\",\n      \"configurePrompt\": \"请先配置 ApiKey 和 模型Id\",\n      \"configureButton\": \"去配置\",\n      \"errorToast\": \"语法检查失败，请重试\"\n    },\n    \"sidePanel\": {\n      \"expand\": \"展开侧边栏\",\n      \"collapse\": \"收起侧边栏\"\n    },\n    \"editPanel\": {\n      \"expand\": \"展开编辑面板\",\n      \"collapse\": \"收起编辑面板\"\n    },\n    \"github\": \"GitHub\",\n    \"backToDashboard\": \"返回仪表盘\",\n    \"copyResume\": {\n      \"tooltip\": \"复制简历\",\n      \"success\": \"简历复制成功\",\n      \"error\": \"简历复制失败\"\n    }\n  },\n  \"aiPolishDialog\": {\n    \"title\": \"AI 润色\",\n    \"description\": {\n      \"polishing\": \"正在为您润色内容...\",\n      \"finished\": \"已经为您优化了内容，请查看效果\"\n    },\n    \"error\": {\n      \"configRequired\": \"请先配置 AI 模型\",\n      \"polishFailed\": \"润色失败\",\n      \"applied\": \"已应用润色内容\"\n    },\n    \"content\": {\n      \"original\": \"原始内容\",\n      \"polished\": \"润色后的内容\"\n    },\n    \"button\": {\n      \"regenerate\": \"重新生成\",\n      \"generating\": \"生成中...\",\n      \"apply\": \"应用内容\"\n    }\n  },\n  \"templates\": {\n    \"switchTemplate\": \"切换模板\"\n  },\n  \"themeModal\": {\n    \"delete\": {\n      \"title\": \"确定要删除吗\",\n      \"description\": \"您确定要删除{title}吗？\",\n      \"confirmText\": \"删除\",\n      \"cancelText\": \"取消\"\n    }\n  }\n}\n\nsrc\\config\\initialResumeData.ts\n<li>前端框架：熟悉 React、Vue.js，熟悉 Next.js、Nuxt.js 等 SSR 框架</li>\n    <li>开发语言：TypeScript、JavaScript(ES6+)、HTML5、CSS3</li>\n    <li>UI/样式：熟悉 TailwindCSS、Sass/Less、CSS Module、Styled-components</li>\n    <li>状态管理：Redux、Vuex、Zustand、Jotai、React Query</li>\n    <li>工程化工具：Webpack、Vite、Rollup、Babel、ESLint</li>\n    <li>测试工具：Jest、React Testing Library、Cypress</li>\n    <li>性能优化：熟悉浏览器渲染原理、性能指标监控、代码分割、懒加载等优化技术</li>\n    <li>版本控制：Git、SVN</li>\n    <li>技术管理：具备团队管理经验，主导过多个大型项目的技术选型和架构设计</li>\n  </ul>\n</div>`,\n  experience: [\n    {\n      id: \"1\",\n      company: \"字节跳动\",\n      position: \"高级前端工程师\",\n      date: \"2021/7 - 至今\",\n      visible: true,\n      details: `<ul class=\"custom-list\">\n      <li>负责抖音创作者平台的开发与维护，主导多个核心功能的技术方案设计</li>\n      <li>优化项目工程化配置，将构建时间从 8 分钟优化至 2 分钟，提升团队开发效率</li>\n      <li>设计并实现组件库，提升代码复用率达 70%，显著减少开发时间</li>\n      <li>主导性能优化项目，使平台首屏加载时间减少 50%，接入 APM 监控系统</li>\n      <li>指导初级工程师，组织技术分享会，提升团队整体技术水平</li>\n    </ul>`,\n    },\n  ],\n  draggingProjectId: null,\n  projects: [\n    {\n      id: \"p1\",\n      name: \"抖音创作者中台\",\n      role: \"前端负责人\",\n      date: \"2022/6 - 2023/12\",\n      description: `<ul class=\"custom-list\">\n        <li>基于 React 开发的创作者数据分析和内容管理平台，服务百万级创作者群体</li>\n        <li>包含数据分析、内容管理、收益管理等多个子系统</li>\n        <li>使用 Redux 进行状态管理，实现复杂数据流的高效处理</li>\n        <li>采用 Ant Design 组件库，确保界面设计的一致性和用户体验</li>\n        <li>实施代码分割和懒加载策略，优化大规模应用的加载性能</li>\n      </ul>`,\n      visible: true,\n    },\n    {\n      id: \"p2\",\n      name: \"微信小程序开发者工具\",\n      role: \"核心开发者\",\n      date: \"2020/3 - 2021/6\",",
    "retrievedDomainDocs": "\n\t\t### 项目文档参考\n\t\t\n\t\t\n\t\t### 技术文档参考\n\t\t\n\t\t"
  }
}