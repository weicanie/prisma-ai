{"version":3,"sources":["../src/constant/error.ts","../src/types/hjm.schema.ts","../src/types/job.ts","../src/types/job.schema.ts","../src/types/knowBase.ts","../src/types/learn.schema.ts","../src/types/login_regist.schema.ts","../src/types/project.ts","../src/types/project.schema.ts","../src/types/project.schema-form.ts","../src/types/resume.ts","../src/types/resume.schema.ts","../src/types/skill.schema.ts","../src/types/sse.ts","../src/utils/jsonMd_obj.ts","../src/utils/md_json.ts"],"sourcesContent":["export enum ErrorCode {\n\tSUCCESS = '0',\n\tUNNAMED = '9999',\n\t//通用错误\n\tVALIDATION_ERROR = '1001',\n\tAUTH_ERROR = '1002',\n\tFORBIDDEN = '1003',\n\tNOT_FOUND = '1004',\n\tSERVER_ERROR = '1005',\n\t//业务错误\n\t//1、注册、登录\n\tUSER_NOT_FOUND = '2001',\n\tUSER_ALREADY_EXISTS = '2002',\n\tUSER_PASSWORD_WRONG = '2003',\n\tCAPTCHAEXPIRED = '2004',\n\tCAPTCHAWRONG = '2005',\n\tUSER_TOKEN_INVALID = '2006',\n\tUSER_TOKEN_NOT_CARRY = '2007',\n\n\t//2、mcp client\n\tSERVER_NOT_FOUND = '3001',\n\tSERVER_CONNECTION_ERROR = '3002',\n\tTOOL_GET_ERROR = '3003',\n\tTOOL_CALL_ERROR = '3004',\n\n\t//3、项目经验\n\tFORMAT_ERROR = '4005'\n}\n\nexport const errorMessage = {\n\t//通用错误\n\t[ErrorCode.SUCCESS]: '成功',\n\t[ErrorCode.VALIDATION_ERROR]: '参数验证失败',\n\t[ErrorCode.AUTH_ERROR]: '未授权',\n\t[ErrorCode.FORBIDDEN]: '禁止访问',\n\t[ErrorCode.NOT_FOUND]: '资源未找到',\n\t[ErrorCode.SERVER_ERROR]: '服务器错误',\n\t//业务错误\n\t//1、注册、登录\n\t[ErrorCode.USER_NOT_FOUND]: '用户不存在',\n\t[ErrorCode.USER_ALREADY_EXISTS]: '用户已存在',\n\t[ErrorCode.USER_PASSWORD_WRONG]: '密码错误',\n\t[ErrorCode.CAPTCHAEXPIRED]: '验证码已过期',\n\t[ErrorCode.CAPTCHAWRONG]: '验证码错误',\n\t[ErrorCode.USER_TOKEN_INVALID]: '用户token无效',\n\t[ErrorCode.USER_TOKEN_NOT_CARRY]: '用户token未携带',\n\n\t//2、mcp client\n\t[ErrorCode.SERVER_NOT_FOUND]: 'MCP server未找到',\n\t[ErrorCode.SERVER_CONNECTION_ERROR]: 'MCP server连接失败',\n\t[ErrorCode.TOOL_GET_ERROR]: '获取mcp工具失败',\n\t[ErrorCode.TOOL_CALL_ERROR]: '调用mcp工具失败',\n\t//3、项目经验\n\t[ErrorCode.FORMAT_ERROR]: '错误的数据格式'\n};\n","import { z } from 'zod';\r\n/* 人岗匹配 llm rerank 时返回的schema */\r\nexport const hjmRerankSchema = z.object({\r\n\tranked_jobs: z\r\n\t\t.array(\r\n\t\t\tz.object({\r\n\t\t\t\tjob_id: z.string().describe('岗位的唯一标识符'),\r\n\t\t\t\treason: z.string().describe('该岗位与简历匹配的具体原因')\r\n\t\t\t})\r\n\t\t)\r\n\t\t.describe('按匹配度从高到低排序的岗位列表')\r\n});\r\n","// 定义招聘信息相关的 DTO 和 VO\r\n\r\nexport enum JobOpenStatus {\r\n\tOPEN = 'open', //招聘中\r\n\tCLOSED = 'closed' //已停止招聘\r\n}\r\n\r\nexport enum JobStatus {\r\n\tCOMMITTED = 'committed', //存储了但未处理\r\n\tEMBEDDED = 'embedded', //已embedding\r\n\tMATCHED = 'matched' //已被用户简历追踪\r\n}\r\n\r\n/**\r\n * 创建招聘信息的 DTO\r\n */\r\nexport interface CreateJobDto {\r\n\tjobName: string; // 职位名称\r\n\tcompanyName: string; // 公司名称\r\n\tdescription: string; // 职位描述\r\n\tlocation?: string; // 工作地点\r\n\tsalary?: string; // 薪资范围\r\n\tlink?: string; // 职位链接\r\n\tjob_status?: JobOpenStatus; // 职位状态， \"open\", \"closed\"\r\n}\r\n\r\nexport type LLMJobDto = Pick<CreateJobDto, 'jobName' | 'companyName' | 'description'>;\r\n\r\n/**\r\n * 更新招聘信息的 DTO (CreateJobDto 的部分属性)\r\n */\r\nexport type UpdateJobDto = Partial<CreateJobDto>;\r\n\r\n/**\r\n * 招聘信息的 VO (View Object)\r\n * 用于API响应和前端展示\r\n */\r\nexport interface JobVo {\r\n\tid: string; // 数据库中的ID\r\n\tjobName: string;\r\n\tcompanyName: string;\r\n\tdescription: string;\r\n\tlocation?: string;\r\n\tsalary?: string;\r\n\tlink?: string;\r\n\tjob_status?: JobOpenStatus; // 职位状态， \"open\", \"closed\"\r\n\tstatus?: JobStatus; // 职位内部状态，\"committed\", \"embedded\", \"matched\" 未处理、已embedding、已被用户简历追踪\r\n\tcreatedAt: string;\r\n\tupdatedAt: string;\r\n}\r\n\r\n/**\r\n * 分页后的招聘信息列表结果\r\n */\r\nexport interface PaginatedJobsResult {\r\n\tdata: JobVo[]; // 当前页的招聘信息数据\r\n\ttotal: number; // 总记录数\r\n\tpage: number; // 当前页码\r\n\tlimit: number; // 每页数量\r\n}\r\n","import { z } from 'zod';\r\n\r\nexport const llmJobSchema = z.object({\r\n\tjobName: z.string().describe('职位名称'),\r\n\tcompanyName: z.string().describe('公司名称'),\r\n\tdescription: z.string().describe('职位描述')\r\n});\r\n","export const type_content_Map: Record<string, string> = {\n\tuserProjectDoc: '我的项目文档',\n\tuserProjectRepo: '我的项目github仓库地址',\n\topenSourceProjectDoc: '开源项目文档',\n\topenSourceProjectRepo: '开源项目github仓库地址',\n\ttechDoc: '技术文档',\n\tinterviewQuestion: '面试题',\n\tother: '其他'\n};\n//上面的作为注释\nexport enum KnowledgeTypeEnum {\n\tuserProjectDoc = 'userProjectDoc', //我的项目文档\n\tuserProjectRepo = 'userProjectRepo', //我的项目github仓库地址\n\topenSourceProjectDoc = 'openSourceProjectDoc', //开源项目文档\n\topenSourceProjectRepo = 'openSourceProjectRepo', //开源项目github仓库地址\n\ttechDoc = 'techDoc', //技术文档\n\tinterviewQuestion = 'interviewQuestion', //面试题\n\tother = 'other' //其他\n}\nexport enum FileTypeEnum {\n\ttxt = 'txt', //txt\n\turl = 'url', //url\n\tdoc = 'doc' //文档\n}\n\n/* 用户知识库 */\nexport interface CreateKnowledgeDto {\n\tname: string; //知识名称\n\tfileType: `${FileTypeEnum}`; //文件类型 'txt' 'url' 'doc'\n\t/* 知识标签-声明知识用途-目前由用户自定义\n    项目经验优化\n    简历匹配岗位\n    简历延申论文\n  */\n\ttag: string[]; //知识标签\n\n\t/* 知识类型\n\n  1.项目相关\n    用户项目\n      项目文档 'userProjectDoc'\n      项目代码（github地址） 'userProjectRepo'\n    同类型开源项目\n      开源项目文档 'openSourceProjectDoc'\n      开源项目代码（github地址） 'openSourceProjectRepo'\n  2.技术相关\n    技术文档 'techDoc'\n  3.面试相关\n    面试题（面经转为面试题） 'interviewQuestion'\n  4.其它 'other'\n\n  */\n\ttype: `${KnowledgeTypeEnum}`; //知识类型\n\tcontent: string; //知识内容\n}\n\nexport type UpdateKnowledgeDto = Partial<CreateKnowledgeDto>;\n\nexport interface KnowledgeVo {\n\tid: string;\n\tname: string;\n\ttype: `${KnowledgeTypeEnum}`;\n\tcreatedAt: Date;\n\tupdatedAt: Date;\n\tfileType: string; // Added missing field\n\ttag: string[]; // Added missing field\n\tcontent: string; // Added missing field\n}\n\n/**\n * 分页后的知识库列表结果\n */\nexport interface PaginatedKnsResult {\n\tdata: KnowledgeVo[]; // 当前页的知识库数据\n\ttotal: number; // 总记录数\n\tpage: number; // 当前页码\n\tlimit: number; // 每页数量\n}\n","import { z } from 'zod';\r\n\r\nconst techItemSchema = z.object({\r\n\tname: z.string().describe('技术名称'),\r\n\tdesc: z.string().describe('学习或实现该技术的简要说明')\r\n});\r\n\r\nconst lightspotItemSchema = z.object({\r\n\tname: z.string().describe('亮点名称'),\r\n\tdesc: z.string().describe('实现该亮点的简要说明')\r\n});\r\n\r\nconst skillRoadItemSchema = z.object({\r\n\ttech: z.array(techItemSchema).describe('需要学习的新技术列表')\r\n});\r\n\r\nconst projectRoadItemSchema = z.object({\r\n\tname: z.string().describe('项目名称'),\r\n\ttech: z.array(techItemSchema).describe('项目中需要学习的新技术列表'),\r\n\tlightspot: z.array(lightspotItemSchema).describe('项目中需要实现的新亮点列表')\r\n});\r\n\r\nexport const roadFromDiffSchema = z.object({\r\n\tskill: skillRoadItemSchema.describe('从职业技能对比中得出的学习路线'),\r\n\tproject: z.array(projectRoadItemSchema).describe('从项目经验对比中得出的学习路线')\r\n});\r\n\r\nexport type RoadFromDiff = z.infer<typeof roadFromDiffSchema>;\r\n","import { z } from 'zod';\n\nconst loginformSchema = z.object({\n\tusername: z.string().min(2, {\n\t\tmessage: '用户名至少需要2个字符'\n\t}),\n\tpassword: z.string().min(6, {\n\t\tmessage: '密码至少需要6个字符'\n\t})\n});\n\nconst registformSchema = z.object({\n\tusername: z.string().min(2, {\n\t\tmessage: '用户名至少需要2个字符'\n\t}),\n\tpassword: z.string().min(6, {\n\t\tmessage: '密码至少需要6个字符'\n\t}),\n\tconfirmPassword: z.string().min(6, {\n\t\tmessage: '请再次输入密码'\n\t}),\n\temail: z.string().email({\n\t\tmessage: '请输入正确的邮箱地址'\n\t}),\n\tcaptcha: z.string().min(6, {\n\t\tmessage: '请输入正确的验证码'\n\t})\n});\n\ntype LoginFormType = z.infer<typeof loginformSchema>;\ntype RegistFormType = z.infer<typeof registformSchema>;\n\nexport { loginformSchema, registformSchema, type LoginFormType, type RegistFormType };\n","import { z } from 'zod';\nimport {\n\tlookupResultSchema,\n\tprojectLookupedSchema,\n\tprojectMinedSchema,\n\tprojectPolishedSchema,\n\tprojectSchema\n} from './project.schema';\n\nexport enum ProjectStatus {\n\tcommitted = 'committed', //初提交\n\tlookuped = 'lookuped', //llm分析完毕\n\n\t/* 仅在 ProjectPolishedSchema 中*/\n\tpolishing = 'polishing', //llm已打磨\n\n\tpolished = 'polished', //用户已合并打磨\n\n\t/* 仅在 ProjectMinedSchema 中*/\n\tmining = 'mining', //llm已挖掘\n\n\tmined = 'mined', //用户已合并挖掘\n\taccepted = 'accepted', //完成\n\n\t/* 仅在ResumeMatched中 */\n\tmatched = 'matched' //已匹配岗位\n}\nexport type lookupResultDto = z.infer<typeof lookupResultSchema>;\n/* 含lookupResult的projectDto */\nexport type projectLookupedDto = z.infer<typeof projectLookupedSchema>;\nexport type ProjectDto = z.infer<typeof projectSchema>;\nexport type ProjectPolishedDto = z.infer<typeof projectPolishedSchema>;\nexport type ProjectMinedDto = z.infer<typeof projectMinedSchema>;\n\nexport interface ProjectVo extends z.infer<typeof projectSchema> {\n\tid: string; // 数据库中的ID\n\tname?: string; //项目名称\n\tstatus: ProjectStatus; //项目状态\n\n\tcreatedAt: string;\n\tupdatedAt: string;\n\n\t//分析结果\n\tlookupResult?: z.infer<typeof lookupResultSchema>;\n}\n\nexport interface ProjectPolishedVo extends z.infer<typeof projectPolishedSchema> {\n\treasonContent?: string; // 推理内容\n}\n\nexport interface ProjectMineddVo extends z.infer<typeof projectMinedSchema> {\n\treasonContent?: string; // 推理内容\n}\n","import { z } from 'zod';\n\nconst infoSchema = z\n\t.object({\n\t\tname: z.string().min(2).max(100).describe('项目名称'),\n\t\tdesc: z.object({\n\t\t\trole: z.string().describe('用户在项目中的角色和职责').optional().default(''),\n\t\t\tcontribute: z.string().describe('用户的核心贡献和参与程度').optional().default(''),\n\t\t\tbgAndTarget: z.string().describe('项目的背景和目的').optional().default('')\n\t\t}),\n\t\ttechStack: z.array(z.string()).describe('项目的技术栈').default([])\n\t})\n\t.describe('项目信息的结构化描述');\n\n/**\n * @param item 每个亮点的类型\n * @returns\n */\nexport function getLightspotSchema<T extends z.ZodTypeAny = z.ZodType<string>>(item: T) {\n\treturn z\n\t\t.object({\n\t\t\tteam: z.array(item).describe('团队贡献方面的亮点').default([]),\n\t\t\tskill: z.array(item).describe('技术亮点/难点方面的亮点').default([]),\n\t\t\tuser: z.array(item).describe('用户体验/业务价值方面的亮点').default([])\n\t\t})\n\t\t.describe('项目亮点的结构化描述');\n}\n\nconst projectSchema = z.object({\n\tinfo: infoSchema,\n\tlightspot: getLightspotSchema(z.string())\n});\n\nconst projectPolishedSchema = z.object({\n\tinfo: infoSchema,\n\t// polishedInfo: infoSchema.optional(),\n\tlightspot: z\n\t\t.object({\n\t\t\tteam: z\n\t\t\t\t.array(\n\t\t\t\t\tz.object({\n\t\t\t\t\t\tcontent: z.string().describe('亮点内容'),\n\t\t\t\t\t\tadvice: z.string().describe('亮点改进建议').default('NONE')\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.describe('团队贡献方面的亮点')\n\t\t\t\t.default([]),\n\t\t\tskill: z\n\t\t\t\t.array(\n\t\t\t\t\tz.object({\n\t\t\t\t\t\tcontent: z.string().describe('亮点内容'),\n\t\t\t\t\t\tadvice: z.string().describe('亮点改进建议').default('NONE')\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.describe('技术亮点/难点方面的亮点')\n\t\t\t\t.default([]),\n\t\t\tuser: z\n\t\t\t\t.array(\n\t\t\t\t\tz.object({\n\t\t\t\t\t\tcontent: z.string().describe('亮点内容'),\n\t\t\t\t\t\tadvice: z.string().describe('亮点改进建议').default('NONE')\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.describe('用户体验/业务价值方面的亮点')\n\t\t\t\t.default([]),\n\t\t\tdelete: z\n\t\t\t\t.array(\n\t\t\t\t\tz.object({\n\t\t\t\t\t\tcontent: z.string().describe('亮点内容'),\n\t\t\t\t\t\treason: z.string().describe('亮点删除原因').default('NONE')\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.describe('删除的亮点')\n\t\t\t\t.default([])\n\t\t})\n\t\t.describe('项目亮点的结构化描述')\n});\nconst lightspotAddedSchema = z.object({\n\tcontent: z.string().describe('亮点内容'),\n\treason: z.string().describe('亮点添加原因').default('NONE'),\n\ttech: z.array(z.string()).describe('涉及技术').default([])\n});\nconst projectMinedSchema = z.object({\n\tinfo: infoSchema,\n\tlightspot: getLightspotSchema(z.string()),\n\tlightspotAdded: getLightspotSchema<typeof lightspotAddedSchema>(lightspotAddedSchema)\n});\n\nconst lookupResultSchema = z.object({\n\tproblem: z\n\t\t.array(\n\t\t\tz.object({\n\t\t\t\tname: z.string().describe('问题名称'),\n\t\t\t\tdesc: z.string().describe('问题描述')\n\t\t\t})\n\t\t)\n\t\t.describe('存在的问题')\n\t\t.default([]),\n\tsolution: z\n\t\t.array(\n\t\t\tz.object({\n\t\t\t\tname: z.string().describe('解决方案名称'),\n\t\t\t\tdesc: z.string().describe('解决方案描述')\n\t\t\t})\n\t\t)\n\t\t.describe('解决方案')\n\t\t.default([]),\n\tscore: z.number().describe('项目描述评分, 0-100分').default(0)\n});\n\nconst projectLookupedSchema = z.object({\n\tinfo: infoSchema,\n\tlightspot: getLightspotSchema(z.string()),\n\tlookupResult: lookupResultSchema\n});\n\nexport {\n\tlookupResultSchema,\n\tprojectLookupedSchema,\n\tprojectMinedSchema,\n\tprojectPolishedSchema,\n\tprojectSchema\n};\n","import { z } from 'zod';\n\n/* 将原有的schema的default()和optional()去掉\nreact-hook-form的 useForm 会报类型错误\n\t疑似是schema对象嵌套导致optional()报错\n\t\t本身optional()是可以用的,只是default()不能用\n\ndefault()通过defaultValues参数平替\n\noptional()在ts类型中是允许值为undefined\n\n表单中的非required是允许用户不填写（即允许提交''）\nrequired是必须填写的（即不允许提交''）\n\t默认即非required, 通过min(1) 实现 required 即可\n\t\tinput可以这么处理（值都是字符串）\n*/\nconst infoSchemaForm = z\n\t.object({\n\t\tname: z.string().min(2).max(100).describe('项目名称'),\n\t\tdesc: z.object({\n\t\t\trole: z.string().describe('用户在项目中的角色和职责'),\n\t\t\tcontribute: z.string().describe('用户的核心贡献和参与程度'),\n\t\t\tbgAndTarget: z.string().describe('项目的背景和目的')\n\t\t}),\n\t\ttechStack: z.array(z.string()).describe('项目的技术栈')\n\t})\n\t.describe('项目信息的结构化描述');\n\nfunction getLightspotSchemaForm(item: any = z.string()) {\n\treturn z\n\t\t.object({\n\t\t\tteam: z.array(item).describe('团队贡献方面的亮点'),\n\t\t\tskill: z.array(item).describe('技术亮点/难点方面的亮点'),\n\t\t\tuser: z.array(item).describe('用户体验/业务价值方面的亮点')\n\t\t})\n\t\t.describe('项目亮点的结构化描述');\n}\nconst projectSchemaForm = z.object({\n\tinfo: infoSchemaForm,\n\tlightspot: getLightspotSchemaForm()\n});\n\nexport { projectSchemaForm };\n","// 定义简历相关的 DTO 和 VO\r\n\r\nimport { z } from 'zod';\r\nimport { ProjectVo } from './project';\r\nimport { resumeMatchedSchema } from './resume.schema';\r\nimport { SkillVo } from './skill';\r\n\r\nexport enum ResumeStatus {\r\n\tcommitted = 'committed', //初提交\r\n\tmatched = 'matched' //用户已合并匹配\r\n}\r\n\r\n/**\r\n * 创建简历的 DTO\r\n */\r\nexport interface CreateResumeDto {\r\n\tname: string; // 简历名称\r\n\tskill?: string; // 关联的技能ID\r\n\tprojects?: string[]; // 关联的项目经验ID列表\r\n}\r\n\r\n/**\r\n * 更新简历的 DTO\r\n */\r\nexport type UpdateResumeDto = Partial<CreateResumeDto>;\r\n\r\n/**\r\n * 简历匹配岗位前端上传的 DTO\r\n */\r\nexport interface MatchJobDto {\r\n\tresume: string; // 简历的id\r\n\tjob: string; // 岗位的id\r\n}\r\n/**\r\n * 简历匹配岗位传入chain的 DTO\r\n */\r\nexport type ResumeMatchedDto = z.infer<typeof resumeMatchedSchema>;\r\n/**\r\n * 简历的 VO (View Object)\r\n * 用于API响应和前端展示\r\n */\r\nexport interface ResumeVo {\r\n\tid: string; // 数据库中的ID\r\n\tname: string;\r\n\tstatus: ResumeStatus; // 简历状态\r\n\tskill: SkillVo; // 关联的技能详细信息 (populated)\r\n\tprojects: ProjectVo[]; // 关联的项目经验详细信息 (populated)\r\n\r\n\tresumeMatcheds?: string[]; // 派生的专用简历ID数组\r\n\r\n\tcreatedAt: string; // 创建时间\r\n\tupdatedAt: string; // 最后更新时间\r\n}\r\n\r\nexport type ResumeMatchedVo = Omit<ResumeVo, 'resumeMatcheds'> & {\r\n\tjobId: string;\r\n};\r\n\r\n/**\r\n * 分页后的简历列表结果\r\n */\r\nexport interface PaginatedResumesResult {\r\n\tdata: ResumeVo[]; // 当前页的简历数据\r\n\ttotal: number; // 总记录数\r\n\tpage: number; // 当前页码\r\n\tlimit: number; // 每页数量\r\n}\r\n\r\n/**\r\n * 分页后的简历列表结果\r\n */\r\nexport interface PaginatedResumeMatchedResult {\r\n\tdata: ResumeMatchedVo[]; // 当前页的简历数据\r\n\ttotal: number; // 总记录数\r\n\tpage: number; // 当前页码\r\n\tlimit: number; // 每页数量\r\n}\r\n","import { z } from 'zod';\r\nimport { projectSchema } from './project.schema';\r\nimport { skillSchema } from './skill.schema';\r\n/**\r\n * match chain 传入的简历\r\n */\r\nexport const resumeMatchedSchema = z.object({\r\n\tname: z.string().describe('简历名称'),\r\n\tskill: skillSchema.describe('专业技能清单'),\r\n\tprojects: z.array(projectSchema).describe('项目经验列表')\r\n});\r\n","import { z } from 'zod';\n\nexport const skillItemSchema = z.object({\n\ttype: z.string().default(''),\n\tcontent: z.array(z.string()).default([])\n});\n\nexport const skillSchema = z.object({\n\tcontent: z.array(skillItemSchema)\n});\n","import { UserInfoFromToken } from './loginVerify';\nimport { ProjectDto } from './project';\n\n/* chunk的标准格式,其它observable返回的chunk都需要转换为该格式\n \t用于流式数据的sse传输和存储\n*/\nexport interface StreamingChunk {\n\tcontent: string; // 内容\n\treasonContent?: string; // 推理内容-r1\n\tdone: boolean; // 是否完成\n\tisReasoning?: boolean; // 是否是推理中-r1\n}\n\n/* 前端收到的chunk数据格式 */\nexport interface DataChunkVO {\n\tdata: StreamingChunk & {\n\t\tcached?: boolean; //是否命中llm缓存\n\t\texact?: boolean; //缓存命中类型 true: 相同 false:相似\n\t};\n}\n/* 前端收到的chunk数据格式-错误信息 */\nexport interface DataChunkErrVO {\n\tdata: {\n\t\terror: string;\n\t\tdone: true;\n\t};\n}\n\n/* 参数类型 */\nexport interface TRequestParams {\n\tpolish: {\n\t\tinput: ProjectDto;\n\t\ttarget: 'polish';\n\t};\n\tmine: {\n\t\tinput: ProjectDto;\n\t\ttarget: 'mine';\n\t};\n\tlookup: {\n\t\tinput: ProjectDto;\n\t\ttarget: 'lookup';\n\t};\n}\n\nexport const RequestTargetMap = {\n\tpolish: '/sse/project-generate', //类型占位符\n\tmine: '/sse/project-generate',\n\tlookup: '/sse/project-generate'\n};\n\n//用于创建llm-sse会话的context\nexport interface LLMSessionRequest {\n\tinput: any; //传入目标方法的输入\n\tuserInfo?: UserInfoFromToken; //由登录验证 Guard 注入的用户信息\n}\n//llm-sse会话创建成功后的响应\nexport interface LLMSessionResponse {\n\tsessionId: string;\n}\n//llm-sse会话状态\nexport interface LLMSessionStatusResponse {\n\t/*\n\t  服务端完成但客户端没完成、会话缓存没了（视为会话不存在）：'notfound' 前端应该新建会话\n    服务端和客户端都完成：'bothdone' 前端应该新建会话\n      \n    服务端完成但客户端没完成、会话缓存还在：'backdone' 前端应该请求断点续传\n\n    服务端和客户端都没完成、创建了任务：'running' 前端应该请求断点续传\n    服务端和客户端都没完成、没创建任务：'tasknotfound' 前端应该请求sse/generate接口创建任务\n\n\t */\n\tstatus: 'notfound' | 'bothdone' | 'backdone' | 'running' | 'tasknotfound';\n}\n","/**\n * 将llm返回的内容解析为JSON格式的对象\n */\nexport function jsonMd_obj(content: string) {\n\tlet jsonMd = content.match(/(?<=```json)(.*)(?=```)/gs)?.[0]; //.默认不匹配\\n\n\n\tif (!jsonMd) {\n\t\tconsole.error(`jsonMd_obj没找到json内容块,输入: ${content}`);\n\t\treturn;\n\t}\n\n\tlet obj;\n\ttry {\n\t\tobj = JSON.parse(jsonMd);\n\t} catch (error) {\n\t\tconsole.error('jsonMd_obj JSON parsing error:', error);\n\t\tconsole.error('jsonMd_obj when parsing:', jsonMd);\n\t}\n\treturn obj;\n}\n","import { z } from 'zod';\nimport { projectSchemaForm } from '../types/project.schema-form';\nimport { type CreateSkillDto, type SkillItem } from '../types/skill';\n/**\n * 将项目的Markdown格式文本转换为符合projectSchemaForm的结构化数据\n * @param markdown 项目的Markdown格式文本\n * @returns 符合projectSchemaForm的结构化数据\n */\nexport function markdownToProjectSchema(markdown: string): z.infer<typeof projectSchemaForm> {\n\t// 初始化结果对象\n\tconst result: z.infer<typeof projectSchemaForm> = {\n\t\tinfo: {\n\t\t\tname: '',\n\t\t\tdesc: {\n\t\t\t\trole: '',\n\t\t\t\tcontribute: '',\n\t\t\t\tbgAndTarget: ''\n\t\t\t},\n\t\t\ttechStack: []\n\t\t},\n\t\tlightspot: {\n\t\t\tteam: [],\n\t\t\tskill: [],\n\t\t\tuser: []\n\t\t}\n\t};\n\t//移除所有注释和空行\n\tmarkdown = markdown.replace('<br />', '').replace(/^\\s*>\\s*(.+?)$/gm, '');\n\n\t// 处理项目名称\n\tconst nameMatch = markdown.match(/名称：(.+?)(?:\\n|$)/);\n\tif (nameMatch && nameMatch[1]) {\n\t\tresult.info.name = nameMatch[1].trim();\n\t}\n\n\t// 处理角色和职责\n\tconst roleMatch = markdown.match(/角色和职责：(.+?)(?:\\n|$)/);\n\tif (roleMatch && roleMatch[1]) {\n\t\tresult.info.desc.role = roleMatch[1].trim();\n\t}\n\n\t// 处理核心贡献\n\tconst contributeMatch = markdown.match(/核心贡献和参与程度：(.+?)(?:\\n|$)/);\n\tif (contributeMatch && contributeMatch[1]) {\n\t\tresult.info.desc.contribute = contributeMatch[1].trim();\n\t}\n\n\t// 处理项目背景和目的\n\tconst bgMatch = markdown.match(/背景和目的：(.+?)(?:\\n|$)/);\n\tif (bgMatch && bgMatch[1]) {\n\t\tresult.info.desc.bgAndTarget = bgMatch[1].trim();\n\t}\n\t// 处理技术栈\n\t//FIXME 为什么\"项目技术栈\\s*\"会匹配到断言内容,而\"项目技术栈\\s*?\"不会 ???\n\tconst techStackSection = markdown.match(/#### 1\\.3 项目技术栈\\s*?\\n([\\s\\S]*?)(?=\\n###|$)/);\n\tconsole.log('markdownToProjectSchema ~ techStackSection:', techStackSection);\n\tif (techStackSection && techStackSection[1]) {\n\t\tconst techStackText = techStackSection[1].trim();\n\t\t// 将逗号、顿号分隔的技术栈转为数组\n\t\tresult.info.techStack = techStackText.split(/[、,，\\s]+/).filter(Boolean);\n\t}\n\n\t// 处理团队贡献亮点\n\tconst teamSection = markdown.match(/#### 2\\.1 团队贡献\\s*([\\s\\S]*?)(?=\\n####|$)/);\n\tif (teamSection && teamSection[1]) {\n\t\t//! crepe编辑器中无序列表项 - 会转为 *: 统一用*,且会跟<br />\n\t\t// 提取所有以 \"*\" 或 \" * \" 开头的行\n\t\tconst teamPoints = teamSection[1].match(/^\\s*\\*\\s*(.+?)$/gm);\n\t\tif (teamPoints) {\n\t\t\tresult.lightspot.team = teamPoints.map(point =>\n\t\t\t\tpoint\n\t\t\t\t\t.replace('<br />', '')\n\t\t\t\t\t.replace(/^\\s*\\*\\s*/, '')\n\t\t\t\t\t.trim()\n\t\t\t);\n\t\t}\n\t}\n\n\t// 处理技术亮点/难点\n\tconst skillSection = markdown.match(/#### 2\\.2 技术亮点\\/难点\\s*([\\s\\S]*?)(?=\\n####|$)/);\n\tif (skillSection && skillSection[1]) {\n\t\tconst skillPoints = skillSection[1].match(/^\\s*\\*\\s*(.+?)$/gm);\n\t\tif (skillPoints) {\n\t\t\tresult.lightspot.skill = skillPoints.map(point =>\n\t\t\t\tpoint\n\t\t\t\t\t.replace('<br />', '')\n\t\t\t\t\t.replace(/^\\s*\\*\\s*/, '')\n\t\t\t\t\t.trim()\n\t\t\t);\n\t\t}\n\t}\n\n\t// 处理用户体验/业务价值\n\tconst userSection = markdown.match(/#### 2\\.3 用户体验\\/业务价值\\s*([\\s\\S]*?)(?=\\n####|$)/);\n\tif (userSection && userSection[1]) {\n\t\tconst userPoints = userSection[1].match(/^\\s*\\*\\s*(.+?)$/gm);\n\t\tif (userPoints) {\n\t\t\tresult.lightspot.user = userPoints.map(point =>\n\t\t\t\tpoint\n\t\t\t\t\t.replace('<br />', '')\n\t\t\t\t\t.replace(/^\\s*\\*\\s*/, '')\n\t\t\t\t\t.trim()\n\t\t\t);\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * 将项目schema对象转换回Markdown格式\n * @param project 项目结构化数据\n * @returns Markdown格式文本\n */\nexport function projectSchemaToMarkdown(project: z.infer<typeof projectSchemaForm>): string {\n\tlet markdown = `### 1、项目信息\\n\\n`;\n\n\t// 基本信息\n\tmarkdown += `#### 1.1 基本信息\\n\\n`;\n\tmarkdown += `* 名称：${project.info.name}\\n\\n`;\n\n\t// 项目介绍\n\tmarkdown += `#### 1.2 项目介绍\\n\\n`;\n\tmarkdown += `* 角色和职责：${project.info.desc.role}\\n`;\n\tmarkdown += `* 核心贡献和参与程度：${project.info.desc.contribute}\\n`;\n\tmarkdown += `* 背景和目的：${project.info.desc.bgAndTarget}\\n\\n`;\n\n\t// 技术栈\n\tmarkdown += `#### 1.3 项目技术栈\\n\\n`;\n\tmarkdown += `${project.info.techStack.join('、')}\\n\\n`;\n\n\t// 亮点\n\tmarkdown += `### 2、亮点\\n\\n`;\n\n\t// 团队贡献\n\tmarkdown += `#### 2.1 团队贡献\\n`;\n\tproject.lightspot.team.forEach(item => {\n\t\tmarkdown += `  * ${item}\\n`;\n\t});\n\n\t// 技术亮点\n\tmarkdown += `#### 2.2 技术亮点/难点\\n`;\n\tproject.lightspot.skill.forEach(item => {\n\t\tmarkdown += `  * ${item}\\n`;\n\t});\n\n\t// 用户体验\n\tmarkdown += `#### 2.3 用户体验/业务价值\\n`;\n\tproject.lightspot.user.forEach(item => {\n\t\tmarkdown += `  * ${item}\\n`;\n\t});\n\n\treturn markdown;\n}\n\n// 将技能数据转换为 Markdown\nexport const skillsToMarkdown = (data: CreateSkillDto): string => {\n\tlet markdown = '## 职业技能\\n\\n';\n\n\tdata.content.forEach(skillGroup => {\n\t\tif (skillGroup.type) {\n\t\t\tmarkdown += `* ${skillGroup.type}:`;\n\t\t\tif (skillGroup.content && skillGroup.content.length > 0) {\n\t\t\t\tmarkdown += ` ${skillGroup.content.join('、')}\\n`;\n\t\t\t} else {\n\t\t\t\tmarkdown += '\\n';\n\t\t\t}\n\t\t}\n\t});\n\n\treturn markdown;\n};\n\n// 将 Markdown 转换为技能数据\nexport const markdownToSkills = (markdown: string): CreateSkillDto => {\n\tconst content: SkillItem[] = [];\n\n\t// 使用正则表达式匹配所有技能块，从 * 开始到下一个 * 或字符串结尾\n\tconst skillBlockRegex = /\\*\\s*([^*]+?)(?=\\*|$)/gs;\n\tconst matches = markdown.matchAll(skillBlockRegex);\n\n\tfor (const match of matches) {\n\t\tconst blockContent = match[1];\n\t\tif (!blockContent) continue;\n\n\t\t// 移除所有换行符\n\t\tconst cleanedContent = blockContent.replace(/\\n+/g, '').trim();\n\n\t\tconst colonMatch = cleanedContent.match(/^([^:：]+)[：:](.*)$/);\n\n\t\tif (colonMatch) {\n\t\t\tconst type = colonMatch[1].trim();\n\t\t\tconst skillsString = colonMatch[2].trim();\n\n\t\t\tif (type) {\n\t\t\t\t// 解析技能列表，支持多种分隔符\n\t\t\t\tconst skills = skillsString\n\t\t\t\t\t? skillsString\n\t\t\t\t\t\t\t.split(/[、，,]/)\n\t\t\t\t\t\t\t.map(skill => skill.trim())\n\t\t\t\t\t\t\t.filter(skill => skill.length > 0)\n\t\t\t\t\t: [];\n\n\t\t\t\tcontent.push({\n\t\t\t\t\ttype,\n\t\t\t\t\tcontent: skills\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t// 如果没有解析到任何内容，返回默认结构\n\tif (content.length === 0) {\n\t\treturn {\n\t\t\tname: '',\n\t\t\tcontent: [\n\t\t\t\t{ type: '前端', content: [] },\n\t\t\t\t{ type: '后端', content: [] },\n\t\t\t\t{ type: '数据库', content: [] }\n\t\t\t]\n\t\t};\n\t}\n\n\treturn { name: '', content };\n};\n"],"mappings":";AAAO,IAAK,YAAL,kBAAKA,eAAL;AACN,EAAAA,WAAA,aAAU;AACV,EAAAA,WAAA,aAAU;AAEV,EAAAA,WAAA,sBAAmB;AACnB,EAAAA,WAAA,gBAAa;AACb,EAAAA,WAAA,eAAY;AACZ,EAAAA,WAAA,eAAY;AACZ,EAAAA,WAAA,kBAAe;AAGf,EAAAA,WAAA,oBAAiB;AACjB,EAAAA,WAAA,yBAAsB;AACtB,EAAAA,WAAA,yBAAsB;AACtB,EAAAA,WAAA,oBAAiB;AACjB,EAAAA,WAAA,kBAAe;AACf,EAAAA,WAAA,wBAAqB;AACrB,EAAAA,WAAA,0BAAuB;AAGvB,EAAAA,WAAA,sBAAmB;AACnB,EAAAA,WAAA,6BAA0B;AAC1B,EAAAA,WAAA,oBAAiB;AACjB,EAAAA,WAAA,qBAAkB;AAGlB,EAAAA,WAAA,kBAAe;AA1BJ,SAAAA;AAAA,GAAA;AA6BL,IAAM,eAAe;AAAA;AAAA,EAE3B,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,6BAA0B,GAAG;AAAA,EAC9B,CAAC,uBAAoB,GAAG;AAAA,EACxB,CAAC,sBAAmB,GAAG;AAAA,EACvB,CAAC,sBAAmB,GAAG;AAAA,EACvB,CAAC,yBAAsB,GAAG;AAAA;AAAA;AAAA,EAG1B,CAAC,2BAAwB,GAAG;AAAA,EAC5B,CAAC,gCAA6B,GAAG;AAAA,EACjC,CAAC,gCAA6B,GAAG;AAAA,EACjC,CAAC,2BAAwB,GAAG;AAAA,EAC5B,CAAC,yBAAsB,GAAG;AAAA,EAC1B,CAAC,+BAA4B,GAAG;AAAA,EAChC,CAAC,iCAA8B,GAAG;AAAA;AAAA,EAGlC,CAAC,6BAA0B,GAAG;AAAA,EAC9B,CAAC,oCAAiC,GAAG;AAAA,EACrC,CAAC,2BAAwB,GAAG;AAAA,EAC5B,CAAC,4BAAyB,GAAG;AAAA;AAAA,EAE7B,CAAC,yBAAsB,GAAG;AAC3B;;;ACtDA,SAAS,SAAS;AAEX,IAAM,kBAAkB,EAAE,OAAO;AAAA,EACvC,aAAa,EACX;AAAA,IACA,EAAE,OAAO;AAAA,MACR,QAAQ,EAAE,OAAO,EAAE,SAAS,kDAAU;AAAA,MACtC,QAAQ,EAAE,OAAO,EAAE,SAAS,gFAAe;AAAA,IAC5C,CAAC;AAAA,EACF,EACC,SAAS,4FAAiB;AAC7B,CAAC;;;ACTM,IAAK,gBAAL,kBAAKC,mBAAL;AACN,EAAAA,eAAA,UAAO;AACP,EAAAA,eAAA,YAAS;AAFE,SAAAA;AAAA,GAAA;AAKL,IAAK,YAAL,kBAAKC,eAAL;AACN,EAAAA,WAAA,eAAY;AACZ,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,aAAU;AAHC,SAAAA;AAAA,GAAA;;;ACPZ,SAAS,KAAAC,UAAS;AAEX,IAAM,eAAeA,GAAE,OAAO;AAAA,EACpC,SAASA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,EACnC,aAAaA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,EACvC,aAAaA,GAAE,OAAO,EAAE,SAAS,0BAAM;AACxC,CAAC;;;ACNM,IAAM,mBAA2C;AAAA,EACvD,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,sBAAsB;AAAA,EACtB,uBAAuB;AAAA,EACvB,SAAS;AAAA,EACT,mBAAmB;AAAA,EACnB,OAAO;AACR;AAEO,IAAK,oBAAL,kBAAKC,uBAAL;AACN,EAAAA,mBAAA,oBAAiB;AACjB,EAAAA,mBAAA,qBAAkB;AAClB,EAAAA,mBAAA,0BAAuB;AACvB,EAAAA,mBAAA,2BAAwB;AACxB,EAAAA,mBAAA,aAAU;AACV,EAAAA,mBAAA,uBAAoB;AACpB,EAAAA,mBAAA,WAAQ;AAPG,SAAAA;AAAA,GAAA;AASL,IAAK,eAAL,kBAAKC,kBAAL;AACN,EAAAA,cAAA,SAAM;AACN,EAAAA,cAAA,SAAM;AACN,EAAAA,cAAA,SAAM;AAHK,SAAAA;AAAA,GAAA;;;ACnBZ,SAAS,KAAAC,UAAS;AAElB,IAAM,iBAAiBA,GAAE,OAAO;AAAA,EAC/B,MAAMA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,EAChC,MAAMA,GAAE,OAAO,EAAE,SAAS,gFAAe;AAC1C,CAAC;AAED,IAAM,sBAAsBA,GAAE,OAAO;AAAA,EACpC,MAAMA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,EAChC,MAAMA,GAAE,OAAO,EAAE,SAAS,8DAAY;AACvC,CAAC;AAED,IAAM,sBAAsBA,GAAE,OAAO;AAAA,EACpC,MAAMA,GAAE,MAAM,cAAc,EAAE,SAAS,8DAAY;AACpD,CAAC;AAED,IAAM,wBAAwBA,GAAE,OAAO;AAAA,EACtC,MAAMA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,EAChC,MAAMA,GAAE,MAAM,cAAc,EAAE,SAAS,gFAAe;AAAA,EACtD,WAAWA,GAAE,MAAM,mBAAmB,EAAE,SAAS,gFAAe;AACjE,CAAC;AAEM,IAAM,qBAAqBA,GAAE,OAAO;AAAA,EAC1C,OAAO,oBAAoB,SAAS,4FAAiB;AAAA,EACrD,SAASA,GAAE,MAAM,qBAAqB,EAAE,SAAS,4FAAiB;AACnE,CAAC;;;ACzBD,SAAS,KAAAC,UAAS;AAElB,IAAM,kBAAkBA,GAAE,OAAO;AAAA,EAChC,UAAUA,GAAE,OAAO,EAAE,IAAI,GAAG;AAAA,IAC3B,SAAS;AAAA,EACV,CAAC;AAAA,EACD,UAAUA,GAAE,OAAO,EAAE,IAAI,GAAG;AAAA,IAC3B,SAAS;AAAA,EACV,CAAC;AACF,CAAC;AAED,IAAM,mBAAmBA,GAAE,OAAO;AAAA,EACjC,UAAUA,GAAE,OAAO,EAAE,IAAI,GAAG;AAAA,IAC3B,SAAS;AAAA,EACV,CAAC;AAAA,EACD,UAAUA,GAAE,OAAO,EAAE,IAAI,GAAG;AAAA,IAC3B,SAAS;AAAA,EACV,CAAC;AAAA,EACD,iBAAiBA,GAAE,OAAO,EAAE,IAAI,GAAG;AAAA,IAClC,SAAS;AAAA,EACV,CAAC;AAAA,EACD,OAAOA,GAAE,OAAO,EAAE,MAAM;AAAA,IACvB,SAAS;AAAA,EACV,CAAC;AAAA,EACD,SAASA,GAAE,OAAO,EAAE,IAAI,GAAG;AAAA,IAC1B,SAAS;AAAA,EACV,CAAC;AACF,CAAC;;;AClBM,IAAK,gBAAL,kBAAKC,mBAAL;AACN,EAAAA,eAAA,eAAY;AACZ,EAAAA,eAAA,cAAW;AAGX,EAAAA,eAAA,eAAY;AAEZ,EAAAA,eAAA,cAAW;AAGX,EAAAA,eAAA,YAAS;AAET,EAAAA,eAAA,WAAQ;AACR,EAAAA,eAAA,cAAW;AAGX,EAAAA,eAAA,aAAU;AAhBC,SAAAA;AAAA,GAAA;;;ACTZ,SAAS,KAAAC,UAAS;AAElB,IAAM,aAAaA,GACjB,OAAO;AAAA,EACP,MAAMA,GAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,SAAS,0BAAM;AAAA,EAChD,MAAMA,GAAE,OAAO;AAAA,IACd,MAAMA,GAAE,OAAO,EAAE,SAAS,0EAAc,EAAE,SAAS,EAAE,QAAQ,EAAE;AAAA,IAC/D,YAAYA,GAAE,OAAO,EAAE,SAAS,0EAAc,EAAE,SAAS,EAAE,QAAQ,EAAE;AAAA,IACrE,aAAaA,GAAE,OAAO,EAAE,SAAS,kDAAU,EAAE,SAAS,EAAE,QAAQ,EAAE;AAAA,EACnE,CAAC;AAAA,EACD,WAAWA,GAAE,MAAMA,GAAE,OAAO,CAAC,EAAE,SAAS,sCAAQ,EAAE,QAAQ,CAAC,CAAC;AAC7D,CAAC,EACA,SAAS,8DAAY;AAMhB,SAAS,mBAA+D,MAAS;AACvF,SAAOA,GACL,OAAO;AAAA,IACP,MAAMA,GAAE,MAAM,IAAI,EAAE,SAAS,wDAAW,EAAE,QAAQ,CAAC,CAAC;AAAA,IACpD,OAAOA,GAAE,MAAM,IAAI,EAAE,SAAS,qEAAc,EAAE,QAAQ,CAAC,CAAC;AAAA,IACxD,MAAMA,GAAE,MAAM,IAAI,EAAE,SAAS,iFAAgB,EAAE,QAAQ,CAAC,CAAC;AAAA,EAC1D,CAAC,EACA,SAAS,8DAAY;AACxB;AAEA,IAAM,gBAAgBA,GAAE,OAAO;AAAA,EAC9B,MAAM;AAAA,EACN,WAAW,mBAAmBA,GAAE,OAAO,CAAC;AACzC,CAAC;AAED,IAAM,wBAAwBA,GAAE,OAAO;AAAA,EACtC,MAAM;AAAA;AAAA,EAEN,WAAWA,GACT,OAAO;AAAA,IACP,MAAMA,GACJ;AAAA,MACAA,GAAE,OAAO;AAAA,QACR,SAASA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,QACnC,QAAQA,GAAE,OAAO,EAAE,SAAS,sCAAQ,EAAE,QAAQ,MAAM;AAAA,MACrD,CAAC;AAAA,IACF,EACC,SAAS,wDAAW,EACpB,QAAQ,CAAC,CAAC;AAAA,IACZ,OAAOA,GACL;AAAA,MACAA,GAAE,OAAO;AAAA,QACR,SAASA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,QACnC,QAAQA,GAAE,OAAO,EAAE,SAAS,sCAAQ,EAAE,QAAQ,MAAM;AAAA,MACrD,CAAC;AAAA,IACF,EACC,SAAS,qEAAc,EACvB,QAAQ,CAAC,CAAC;AAAA,IACZ,MAAMA,GACJ;AAAA,MACAA,GAAE,OAAO;AAAA,QACR,SAASA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,QACnC,QAAQA,GAAE,OAAO,EAAE,SAAS,sCAAQ,EAAE,QAAQ,MAAM;AAAA,MACrD,CAAC;AAAA,IACF,EACC,SAAS,iFAAgB,EACzB,QAAQ,CAAC,CAAC;AAAA,IACZ,QAAQA,GACN;AAAA,MACAA,GAAE,OAAO;AAAA,QACR,SAASA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,QACnC,QAAQA,GAAE,OAAO,EAAE,SAAS,sCAAQ,EAAE,QAAQ,MAAM;AAAA,MACrD,CAAC;AAAA,IACF,EACC,SAAS,gCAAO,EAChB,QAAQ,CAAC,CAAC;AAAA,EACb,CAAC,EACA,SAAS,8DAAY;AACxB,CAAC;AACD,IAAM,uBAAuBA,GAAE,OAAO;AAAA,EACrC,SAASA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,EACnC,QAAQA,GAAE,OAAO,EAAE,SAAS,sCAAQ,EAAE,QAAQ,MAAM;AAAA,EACpD,MAAMA,GAAE,MAAMA,GAAE,OAAO,CAAC,EAAE,SAAS,0BAAM,EAAE,QAAQ,CAAC,CAAC;AACtD,CAAC;AACD,IAAM,qBAAqBA,GAAE,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,WAAW,mBAAmBA,GAAE,OAAO,CAAC;AAAA,EACxC,gBAAgB,mBAAgD,oBAAoB;AACrF,CAAC;AAED,IAAM,qBAAqBA,GAAE,OAAO;AAAA,EACnC,SAASA,GACP;AAAA,IACAA,GAAE,OAAO;AAAA,MACR,MAAMA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,MAChC,MAAMA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,IACjC,CAAC;AAAA,EACF,EACC,SAAS,gCAAO,EAChB,QAAQ,CAAC,CAAC;AAAA,EACZ,UAAUA,GACR;AAAA,IACAA,GAAE,OAAO;AAAA,MACR,MAAMA,GAAE,OAAO,EAAE,SAAS,sCAAQ;AAAA,MAClC,MAAMA,GAAE,OAAO,EAAE,SAAS,sCAAQ;AAAA,IACnC,CAAC;AAAA,EACF,EACC,SAAS,0BAAM,EACf,QAAQ,CAAC,CAAC;AAAA,EACZ,OAAOA,GAAE,OAAO,EAAE,SAAS,mDAAgB,EAAE,QAAQ,CAAC;AACvD,CAAC;AAED,IAAM,wBAAwBA,GAAE,OAAO;AAAA,EACtC,MAAM;AAAA,EACN,WAAW,mBAAmBA,GAAE,OAAO,CAAC;AAAA,EACxC,cAAc;AACf,CAAC;;;AClHD,SAAS,KAAAC,UAAS;AAgBlB,IAAM,iBAAiBA,GACrB,OAAO;AAAA,EACP,MAAMA,GAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,SAAS,0BAAM;AAAA,EAChD,MAAMA,GAAE,OAAO;AAAA,IACd,MAAMA,GAAE,OAAO,EAAE,SAAS,0EAAc;AAAA,IACxC,YAAYA,GAAE,OAAO,EAAE,SAAS,0EAAc;AAAA,IAC9C,aAAaA,GAAE,OAAO,EAAE,SAAS,kDAAU;AAAA,EAC5C,CAAC;AAAA,EACD,WAAWA,GAAE,MAAMA,GAAE,OAAO,CAAC,EAAE,SAAS,sCAAQ;AACjD,CAAC,EACA,SAAS,8DAAY;AAEvB,SAAS,uBAAuB,OAAYA,GAAE,OAAO,GAAG;AACvD,SAAOA,GACL,OAAO;AAAA,IACP,MAAMA,GAAE,MAAM,IAAI,EAAE,SAAS,wDAAW;AAAA,IACxC,OAAOA,GAAE,MAAM,IAAI,EAAE,SAAS,qEAAc;AAAA,IAC5C,MAAMA,GAAE,MAAM,IAAI,EAAE,SAAS,iFAAgB;AAAA,EAC9C,CAAC,EACA,SAAS,8DAAY;AACxB;AACA,IAAM,oBAAoBA,GAAE,OAAO;AAAA,EAClC,MAAM;AAAA,EACN,WAAW,uBAAuB;AACnC,CAAC;;;ACjCM,IAAK,eAAL,kBAAKC,kBAAL;AACN,EAAAA,cAAA,eAAY;AACZ,EAAAA,cAAA,aAAU;AAFC,SAAAA;AAAA,GAAA;;;ACPZ,SAAS,KAAAC,UAAS;;;ACAlB,SAAS,KAAAC,UAAS;AAEX,IAAM,kBAAkBA,GAAE,OAAO;AAAA,EACvC,MAAMA,GAAE,OAAO,EAAE,QAAQ,EAAE;AAAA,EAC3B,SAASA,GAAE,MAAMA,GAAE,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC;AACxC,CAAC;AAEM,IAAM,cAAcA,GAAE,OAAO;AAAA,EACnC,SAASA,GAAE,MAAM,eAAe;AACjC,CAAC;;;ADHM,IAAM,sBAAsBC,GAAE,OAAO;AAAA,EAC3C,MAAMA,GAAE,OAAO,EAAE,SAAS,0BAAM;AAAA,EAChC,OAAO,YAAY,SAAS,sCAAQ;AAAA,EACpC,UAAUA,GAAE,MAAM,aAAa,EAAE,SAAS,sCAAQ;AACnD,CAAC;;;AEkCM,IAAM,mBAAmB;AAAA,EAC/B,QAAQ;AAAA;AAAA,EACR,MAAM;AAAA,EACN,QAAQ;AACT;;;AC7CO,SAAS,WAAW,SAAiB;AAC3C,MAAI,SAAS,QAAQ,MAAM,2BAA2B,IAAI,CAAC;AAE3D,MAAI,CAAC,QAAQ;AACZ,YAAQ,MAAM,oEAA4B,OAAO,EAAE;AACnD;AAAA,EACD;AAEA,MAAI;AACJ,MAAI;AACH,UAAM,KAAK,MAAM,MAAM;AAAA,EACxB,SAAS,OAAO;AACf,YAAQ,MAAM,kCAAkC,KAAK;AACrD,YAAQ,MAAM,4BAA4B,MAAM;AAAA,EACjD;AACA,SAAO;AACR;;;ACXO,SAAS,wBAAwB,UAAqD;AAE5F,QAAM,SAA4C;AAAA,IACjD,MAAM;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,QACL,MAAM;AAAA,QACN,YAAY;AAAA,QACZ,aAAa;AAAA,MACd;AAAA,MACA,WAAW,CAAC;AAAA,IACb;AAAA,IACA,WAAW;AAAA,MACV,MAAM,CAAC;AAAA,MACP,OAAO,CAAC;AAAA,MACR,MAAM,CAAC;AAAA,IACR;AAAA,EACD;AAEA,aAAW,SAAS,QAAQ,UAAU,EAAE,EAAE,QAAQ,oBAAoB,EAAE;AAGxE,QAAM,YAAY,SAAS,MAAM,kBAAkB;AACnD,MAAI,aAAa,UAAU,CAAC,GAAG;AAC9B,WAAO,KAAK,OAAO,UAAU,CAAC,EAAE,KAAK;AAAA,EACtC;AAGA,QAAM,YAAY,SAAS,MAAM,qBAAqB;AACtD,MAAI,aAAa,UAAU,CAAC,GAAG;AAC9B,WAAO,KAAK,KAAK,OAAO,UAAU,CAAC,EAAE,KAAK;AAAA,EAC3C;AAGA,QAAM,kBAAkB,SAAS,MAAM,yBAAyB;AAChE,MAAI,mBAAmB,gBAAgB,CAAC,GAAG;AAC1C,WAAO,KAAK,KAAK,aAAa,gBAAgB,CAAC,EAAE,KAAK;AAAA,EACvD;AAGA,QAAM,UAAU,SAAS,MAAM,qBAAqB;AACpD,MAAI,WAAW,QAAQ,CAAC,GAAG;AAC1B,WAAO,KAAK,KAAK,cAAc,QAAQ,CAAC,EAAE,KAAK;AAAA,EAChD;AAGA,QAAM,mBAAmB,SAAS,MAAM,4CAA4C;AACpF,UAAQ,IAAI,+CAA+C,gBAAgB;AAC3E,MAAI,oBAAoB,iBAAiB,CAAC,GAAG;AAC5C,UAAM,gBAAgB,iBAAiB,CAAC,EAAE,KAAK;AAE/C,WAAO,KAAK,YAAY,cAAc,MAAM,UAAU,EAAE,OAAO,OAAO;AAAA,EACvE;AAGA,QAAM,cAAc,SAAS,MAAM,yCAAyC;AAC5E,MAAI,eAAe,YAAY,CAAC,GAAG;AAGlC,UAAM,aAAa,YAAY,CAAC,EAAE,MAAM,mBAAmB;AAC3D,QAAI,YAAY;AACf,aAAO,UAAU,OAAO,WAAW;AAAA,QAAI,WACtC,MACE,QAAQ,UAAU,EAAE,EACpB,QAAQ,aAAa,EAAE,EACvB,KAAK;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAGA,QAAM,eAAe,SAAS,MAAM,6CAA6C;AACjF,MAAI,gBAAgB,aAAa,CAAC,GAAG;AACpC,UAAM,cAAc,aAAa,CAAC,EAAE,MAAM,mBAAmB;AAC7D,QAAI,aAAa;AAChB,aAAO,UAAU,QAAQ,YAAY;AAAA,QAAI,WACxC,MACE,QAAQ,UAAU,EAAE,EACpB,QAAQ,aAAa,EAAE,EACvB,KAAK;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAGA,QAAM,cAAc,SAAS,MAAM,+CAA+C;AAClF,MAAI,eAAe,YAAY,CAAC,GAAG;AAClC,UAAM,aAAa,YAAY,CAAC,EAAE,MAAM,mBAAmB;AAC3D,QAAI,YAAY;AACf,aAAO,UAAU,OAAO,WAAW;AAAA,QAAI,WACtC,MACE,QAAQ,UAAU,EAAE,EACpB,QAAQ,aAAa,EAAE,EACvB,KAAK;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;AAOO,SAAS,wBAAwB,SAAoD;AAC3F,MAAI,WAAW;AAAA;AAAA;AAGf,cAAY;AAAA;AAAA;AACZ,cAAY,uBAAQ,QAAQ,KAAK,IAAI;AAAA;AAAA;AAGrC,cAAY;AAAA;AAAA;AACZ,cAAY,yCAAW,QAAQ,KAAK,KAAK,IAAI;AAAA;AAC7C,cAAY,iEAAe,QAAQ,KAAK,KAAK,UAAU;AAAA;AACvD,cAAY,yCAAW,QAAQ,KAAK,KAAK,WAAW;AAAA;AAAA;AAGpD,cAAY;AAAA;AAAA;AACZ,cAAY,GAAG,QAAQ,KAAK,UAAU,KAAK,QAAG,CAAC;AAAA;AAAA;AAG/C,cAAY;AAAA;AAAA;AAGZ,cAAY;AAAA;AACZ,UAAQ,UAAU,KAAK,QAAQ,UAAQ;AACtC,gBAAY,OAAO,IAAI;AAAA;AAAA,EACxB,CAAC;AAGD,cAAY;AAAA;AACZ,UAAQ,UAAU,MAAM,QAAQ,UAAQ;AACvC,gBAAY,OAAO,IAAI;AAAA;AAAA,EACxB,CAAC;AAGD,cAAY;AAAA;AACZ,UAAQ,UAAU,KAAK,QAAQ,UAAQ;AACtC,gBAAY,OAAO,IAAI;AAAA;AAAA,EACxB,CAAC;AAED,SAAO;AACR;AAGO,IAAM,mBAAmB,CAAC,SAAiC;AACjE,MAAI,WAAW;AAEf,OAAK,QAAQ,QAAQ,gBAAc;AAClC,QAAI,WAAW,MAAM;AACpB,kBAAY,KAAK,WAAW,IAAI;AAChC,UAAI,WAAW,WAAW,WAAW,QAAQ,SAAS,GAAG;AACxD,oBAAY,IAAI,WAAW,QAAQ,KAAK,QAAG,CAAC;AAAA;AAAA,MAC7C,OAAO;AACN,oBAAY;AAAA,MACb;AAAA,IACD;AAAA,EACD,CAAC;AAED,SAAO;AACR;AAGO,IAAM,mBAAmB,CAAC,aAAqC;AACrE,QAAM,UAAuB,CAAC;AAG9B,QAAM,kBAAkB;AACxB,QAAM,UAAU,SAAS,SAAS,eAAe;AAEjD,aAAW,SAAS,SAAS;AAC5B,UAAM,eAAe,MAAM,CAAC;AAC5B,QAAI,CAAC,aAAc;AAGnB,UAAM,iBAAiB,aAAa,QAAQ,QAAQ,EAAE,EAAE,KAAK;AAE7D,UAAM,aAAa,eAAe,MAAM,oBAAoB;AAE5D,QAAI,YAAY;AACf,YAAM,OAAO,WAAW,CAAC,EAAE,KAAK;AAChC,YAAM,eAAe,WAAW,CAAC,EAAE,KAAK;AAExC,UAAI,MAAM;AAET,cAAM,SAAS,eACZ,aACC,MAAM,OAAO,EACb,IAAI,WAAS,MAAM,KAAK,CAAC,EACzB,OAAO,WAAS,MAAM,SAAS,CAAC,IACjC,CAAC;AAEJ,gBAAQ,KAAK;AAAA,UACZ;AAAA,UACA,SAAS;AAAA,QACV,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AAGA,MAAI,QAAQ,WAAW,GAAG;AACzB,WAAO;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,QACR,EAAE,MAAM,gBAAM,SAAS,CAAC,EAAE;AAAA,QAC1B,EAAE,MAAM,gBAAM,SAAS,CAAC,EAAE;AAAA,QAC1B,EAAE,MAAM,sBAAO,SAAS,CAAC,EAAE;AAAA,MAC5B;AAAA,IACD;AAAA,EACD;AAEA,SAAO,EAAE,MAAM,IAAI,QAAQ;AAC5B;","names":["ErrorCode","JobOpenStatus","JobStatus","z","KnowledgeTypeEnum","FileTypeEnum","z","z","ProjectStatus","z","z","ResumeStatus","z","z","z"]}