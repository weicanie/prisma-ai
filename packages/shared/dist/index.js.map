{"version":3,"sources":["../src/index.ts","../src/constant/error.ts","../src/types/knowBase.ts","../src/types/login_regist.schema.ts","../src/types/project.ts","../src/types/project.schema.ts","../src/types/project.schema-form.ts","../src/types/sse.ts","../src/utils/jsonMd_obj.ts","../src/utils/md_json.ts"],"sourcesContent":["export * from './constant/error';\r\nexport * from './types/job';\r\nexport * from './types/knowBase';\r\nexport * from './types/login_regist';\r\nexport * from './types/login_regist.schema';\r\nexport * from './types/loginVerify';\r\nexport * from './types/project';\r\nexport * from './types/project.schema';\r\nexport * from './types/project.schema-form';\r\nexport * from './types/resume';\r\nexport * from './types/serverDataFormat';\r\nexport * from './types/skill';\r\nexport * from './types/sse';\r\nexport * from './utils/jsonMd_obj';\r\nexport * from './utils/md_json';\r\n","export enum ErrorCode {\r\n\tSUCCESS = '0',\r\n\tUNNAMED = '9999',\r\n\t//通用错误\r\n\tVALIDATION_ERROR = '1001',\r\n\tAUTH_ERROR = '1002',\r\n\tFORBIDDEN = '1003',\r\n\tNOT_FOUND = '1004',\r\n\tSERVER_ERROR = '1005',\r\n\t//业务错误\r\n\t//1、注册、登录\r\n\tUSER_NOT_FOUND = '2001',\r\n\tUSER_ALREADY_EXISTS = '2002',\r\n\tUSER_PASSWORD_WRONG = '2003',\r\n\tCAPTCHAEXPIRED = '2004',\r\n\tCAPTCHAWRONG = '2005',\r\n\tUSER_TOKEN_INVALID = '2006',\r\n\tUSER_TOKEN_NOT_CARRY = '2007',\r\n\r\n\t//2、mcp client\r\n\tSERVER_NOT_FOUND = '3001',\r\n\tSERVER_CONNECTION_ERROR = '3002',\r\n\tTOOL_GET_ERROR = '3003',\r\n\tTOOL_CALL_ERROR = '3004',\r\n\r\n\t//3、项目经验\r\n\tFORMAT_ERROR = '4005'\r\n}\r\n\r\nexport const errorMessage = {\r\n\t//通用错误\r\n\t[ErrorCode.SUCCESS]: '成功',\r\n\t[ErrorCode.VALIDATION_ERROR]: '参数验证失败',\r\n\t[ErrorCode.AUTH_ERROR]: '未授权',\r\n\t[ErrorCode.FORBIDDEN]: '禁止访问',\r\n\t[ErrorCode.NOT_FOUND]: '资源未找到',\r\n\t[ErrorCode.SERVER_ERROR]: '服务器错误',\r\n\t//业务错误\r\n\t//1、注册、登录\r\n\t[ErrorCode.USER_NOT_FOUND]: '用户不存在',\r\n\t[ErrorCode.USER_ALREADY_EXISTS]: '用户已存在',\r\n\t[ErrorCode.USER_PASSWORD_WRONG]: '密码错误',\r\n\t[ErrorCode.CAPTCHAEXPIRED]: '验证码已过期',\r\n\t[ErrorCode.CAPTCHAWRONG]: '验证码错误',\r\n\t[ErrorCode.USER_TOKEN_INVALID]: '用户token无效',\r\n\t[ErrorCode.USER_TOKEN_NOT_CARRY]: '用户token未携带',\r\n\r\n\t//2、mcp client\r\n\t[ErrorCode.SERVER_NOT_FOUND]: 'MCP server未找到',\r\n\t[ErrorCode.SERVER_CONNECTION_ERROR]: 'MCP server连接失败',\r\n\t[ErrorCode.TOOL_GET_ERROR]: '获取mcp工具失败',\r\n\t[ErrorCode.TOOL_CALL_ERROR]: '调用mcp工具失败',\r\n\t//3、项目经验\r\n\t[ErrorCode.FORMAT_ERROR]: '错误的数据格式'\r\n};\r\n","export const type_content_Map: Record<string, string> = {\r\n\tuserProjectDoc: '我的项目文档',\r\n\tuserProjectRepo: '我的项目github仓库地址',\r\n\topenSourceProjectDoc: '开源项目文档',\r\n\topenSourceProjectRepo: '开源项目github仓库地址',\r\n\ttechDoc: '技术文档',\r\n\tinterviewQuestion: '面试题',\r\n\tother: '其他'\r\n};\r\n//上面的作为注释\r\nexport enum KnowledgeTypeEnum {\r\n\tuserProjectDoc = 'userProjectDoc', //我的项目文档\r\n\tuserProjectRepo = 'userProjectRepo', //我的项目github仓库地址\r\n\topenSourceProjectDoc = 'openSourceProjectDoc', //开源项目文档\r\n\topenSourceProjectRepo = 'openSourceProjectRepo', //开源项目github仓库地址\r\n\ttechDoc = 'techDoc', //技术文档\r\n\tinterviewQuestion = 'interviewQuestion', //面试题\r\n\tother = 'other' //其他\r\n}\r\nexport enum FileTypeEnum {\r\n\ttxt = 'txt', //txt\r\n\turl = 'url', //url\r\n\tdoc = 'doc' //文档\r\n}\r\n\r\n/* 用户知识库 */\r\nexport interface CreateKnowledgeDto {\r\n\tname: string; //知识名称\r\n\tfileType: `${FileTypeEnum}`; //文件类型 'txt' 'url' 'doc'\r\n\t/* 知识标签-声明知识用途-目前由用户自定义\r\n    项目经验优化\r\n    简历匹配岗位\r\n    简历延申论文\r\n  */\r\n\ttag: string[]; //知识标签\r\n\r\n\t/* 知识类型\r\n\r\n  1.项目相关\r\n    用户项目\r\n      项目文档 'userProjectDoc'\r\n      项目代码（github地址） 'userProjectRepo'\r\n    同类型开源项目\r\n      开源项目文档 'openSourceProjectDoc'\r\n      开源项目代码（github地址） 'openSourceProjectRepo'\r\n  2.技术相关\r\n    技术文档 'techDoc'\r\n  3.面试相关\r\n    面试题（面经转为面试题） 'interviewQuestion'\r\n  4.其它 'other'\r\n\r\n  */\r\n\ttype: `${KnowledgeTypeEnum}`; //知识类型\r\n\tcontent: string; //知识内容\r\n}\r\n\r\nexport type UpdateKnowledgeDto = Partial<CreateKnowledgeDto>;\r\n\r\nexport interface KnowledgeVo {\r\n\tid: string;\r\n\tname: string;\r\n\ttype: `${KnowledgeTypeEnum}`;\r\n\tcreatedAt: Date;\r\n\tupdatedAt: Date;\r\n\tfileType: string; // Added missing field\r\n\ttag: string[]; // Added missing field\r\n\tcontent: string; // Added missing field\r\n}\r\n\r\n/**\r\n * 分页后的知识库列表结果\r\n */\r\nexport interface PaginatedKnsResult {\r\n\tdata: KnowledgeVo[]; // 当前页的知识库数据\r\n\ttotal: number; // 总记录数\r\n\tpage: number; // 当前页码\r\n\tlimit: number; // 每页数量\r\n}\r\n","import { z } from 'zod';\r\n\r\nconst loginformSchema = z.object({\r\n\tusername: z.string().min(2, {\r\n\t\tmessage: '用户名至少需要2个字符'\r\n\t}),\r\n\tpassword: z.string().min(6, {\r\n\t\tmessage: '密码至少需要6个字符'\r\n\t})\r\n});\r\n\r\nconst registformSchema = z.object({\r\n\tusername: z.string().min(2, {\r\n\t\tmessage: '用户名至少需要2个字符'\r\n\t}),\r\n\tpassword: z.string().min(6, {\r\n\t\tmessage: '密码至少需要6个字符'\r\n\t}),\r\n\tconfirmPassword: z.string().min(6, {\r\n\t\tmessage: '请再次输入密码'\r\n\t}),\r\n\temail: z.string().email({\r\n\t\tmessage: '请输入正确的邮箱地址'\r\n\t}),\r\n\tcaptcha: z.string().min(6, {\r\n\t\tmessage: '请输入正确的验证码'\r\n\t})\r\n});\r\n\r\ntype LoginFormType = z.infer<typeof loginformSchema>;\r\ntype RegistFormType = z.infer<typeof registformSchema>;\r\n\r\nexport { loginformSchema, registformSchema, type LoginFormType, type RegistFormType };\r\n","import { z } from 'zod';\r\nimport {\r\n\tlookupResultSchema,\r\n\tprojectLookupedSchema,\r\n\tprojectMinedSchema,\r\n\tprojectPolishedSchema,\r\n\tprojectSchema\r\n} from './project.schema';\r\n\r\nexport enum ProjectStatus {\r\n\tcommitted = 'committed', //初提交\r\n\tlookuped = 'lookuped', //llm分析完毕\r\n\r\n\t/* 仅在 ProjectPolishedSchema 中*/\r\n\tpolishing = 'polishing', //llm已打磨\r\n\r\n\tpolished = 'polished', //用户已合并打磨\r\n\r\n\t/* 仅在 ProjectMinedSchema 中*/\r\n\tmining = 'mining', //llm已挖掘\r\n\r\n\tmined = 'mined', //用户已合并挖掘\r\n\taccepted = 'accepted' //完成\r\n}\r\nexport type lookupResultDto = z.infer<typeof lookupResultSchema>;\r\n/* 含lookupResult的projectDto */\r\nexport type projectLookupedDto = z.infer<typeof projectLookupedSchema>;\r\nexport type ProjectDto = z.infer<typeof projectSchema>;\r\nexport type ProjectPolishedDto = z.infer<typeof projectPolishedSchema>;\r\nexport type ProjectMinedDto = z.infer<typeof projectMinedSchema>;\r\n\r\nexport interface ProjectVo extends z.infer<typeof projectSchema> {\r\n\tid?: string; // 数据库中的ID\r\n\tname?: string; //项目名称\r\n\tstatus: ProjectStatus; //项目状态\r\n\r\n\tcreatedAt?: string;\r\n\tupdatedAt?: string;\r\n\r\n\t//分析结果\r\n\tlookupResult?: z.infer<typeof lookupResultSchema>;\r\n}\r\n\r\nexport interface ProjectPolishedVo extends z.infer<typeof projectPolishedSchema> {\r\n\treasonContent?: string; // 推理内容\r\n}\r\n\r\nexport interface ProjectMineddVo extends z.infer<typeof projectMinedSchema> {\r\n\treasonContent?: string; // 推理内容\r\n}\r\n","import { z } from 'zod';\r\n\r\nconst infoSchema = z\r\n\t.object({\r\n\t\tname: z.string().min(2).max(100).describe('项目名称'),\r\n\t\tdesc: z.object({\r\n\t\t\trole: z.string().describe('用户在项目中的角色和职责').optional().default(''),\r\n\t\t\tcontribute: z.string().describe('用户的核心贡献和参与程度').optional().default(''),\r\n\t\t\tbgAndTarget: z.string().describe('项目的背景和目的').optional().default('')\r\n\t\t}),\r\n\t\ttechStack: z.array(z.string()).describe('项目的技术栈').default([])\r\n\t})\r\n\t.describe('项目信息的结构化描述');\r\n\r\n/**\r\n * @param item 每个亮点的类型\r\n * @returns\r\n */\r\nexport function getLightspotSchema<T extends z.ZodTypeAny = z.ZodType<string>>(item: T) {\r\n\treturn z\r\n\t\t.object({\r\n\t\t\tteam: z.array(item).describe('团队贡献方面的亮点').default([]),\r\n\t\t\tskill: z.array(item).describe('技术亮点/难点方面的亮点').default([]),\r\n\t\t\tuser: z.array(item).describe('用户体验/业务价值方面的亮点').default([])\r\n\t\t})\r\n\t\t.describe('项目亮点的结构化描述');\r\n}\r\n\r\nconst projectSchema = z.object({\r\n\tinfo: infoSchema,\r\n\tlightspot: getLightspotSchema(z.string())\r\n});\r\n\r\nconst projectPolishedSchema = z.object({\r\n\tinfo: infoSchema,\r\n\t// polishedInfo: infoSchema.optional(),\r\n\tlightspot: z\r\n\t\t.object({\r\n\t\t\tteam: z\r\n\t\t\t\t.array(\r\n\t\t\t\t\tz.object({\r\n\t\t\t\t\t\tcontent: z.string().describe('亮点内容'),\r\n\t\t\t\t\t\tadvice: z.string().describe('亮点改进建议').default('NONE')\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t\t.describe('团队贡献方面的亮点')\r\n\t\t\t\t.default([]),\r\n\t\t\tskill: z\r\n\t\t\t\t.array(\r\n\t\t\t\t\tz.object({\r\n\t\t\t\t\t\tcontent: z.string().describe('亮点内容'),\r\n\t\t\t\t\t\tadvice: z.string().describe('亮点改进建议').default('NONE')\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t\t.describe('技术亮点/难点方面的亮点')\r\n\t\t\t\t.default([]),\r\n\t\t\tuser: z\r\n\t\t\t\t.array(\r\n\t\t\t\t\tz.object({\r\n\t\t\t\t\t\tcontent: z.string().describe('亮点内容'),\r\n\t\t\t\t\t\tadvice: z.string().describe('亮点改进建议').default('NONE')\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t\t.describe('用户体验/业务价值方面的亮点')\r\n\t\t\t\t.default([]),\r\n\t\t\tdelete: z\r\n\t\t\t\t.array(\r\n\t\t\t\t\tz.object({\r\n\t\t\t\t\t\tcontent: z.string().describe('亮点内容'),\r\n\t\t\t\t\t\treason: z.string().describe('亮点删除原因').default('NONE')\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t\t.describe('删除的亮点')\r\n\t\t\t\t.default([])\r\n\t\t})\r\n\t\t.describe('项目亮点的结构化描述')\r\n});\r\nconst lightspotAddedSchema = z.object({\r\n\tcontent: z.string().describe('亮点内容'),\r\n\treason: z.string().describe('亮点添加原因').default('NONE'),\r\n\ttech: z.array(z.string()).describe('涉及技术').default([])\r\n});\r\nconst projectMinedSchema = z.object({\r\n\tinfo: infoSchema,\r\n\tlightspot: getLightspotSchema(z.string()),\r\n\tlightspotAdded: getLightspotSchema<typeof lightspotAddedSchema>(lightspotAddedSchema)\r\n});\r\n\r\nconst lookupResultSchema = z.object({\r\n\tproblem: z\r\n\t\t.array(\r\n\t\t\tz.object({\r\n\t\t\t\tname: z.string().describe('问题名称'),\r\n\t\t\t\tdesc: z.string().describe('问题描述')\r\n\t\t\t})\r\n\t\t)\r\n\t\t.describe('存在的问题')\r\n\t\t.default([]),\r\n\tsolution: z\r\n\t\t.array(\r\n\t\t\tz.object({\r\n\t\t\t\tname: z.string().describe('解决方案名称'),\r\n\t\t\t\tdesc: z.string().describe('解决方案描述')\r\n\t\t\t})\r\n\t\t)\r\n\t\t.describe('解决方案')\r\n\t\t.default([]),\r\n\tscore: z.number().describe('项目描述评分, 0-100分').default(0)\r\n});\r\n\r\nconst projectLookupedSchema = z.object({\r\n\tinfo: infoSchema,\r\n\tlightspot: getLightspotSchema(z.string()),\r\n\tlookupResult: lookupResultSchema\r\n});\r\n\r\nexport {\r\n\tlookupResultSchema,\r\n\tprojectLookupedSchema,\r\n\tprojectMinedSchema,\r\n\tprojectPolishedSchema,\r\n\tprojectSchema\r\n};\r\n","import { z } from 'zod';\r\n\r\n/* 将原有的schema的default()和optional()去掉\r\nreact-hook-form的 useForm 会报类型错误\r\n\t疑似是schema对象嵌套导致optional()报错\r\n\t\t本身optional()是可以用的,只是default()不能用\r\n\r\ndefault()通过defaultValues参数平替\r\n\r\noptional()在ts类型中是允许值为undefined\r\n\r\n表单中的非required是允许用户不填写（即允许提交''）\r\nrequired是必须填写的（即不允许提交''）\r\n\t默认即非required, 通过min(1) 实现 required 即可\r\n\t\tinput可以这么处理（值都是字符串）\r\n*/\r\nconst infoSchemaForm = z\r\n\t.object({\r\n\t\tname: z.string().min(2).max(100).describe('项目名称'),\r\n\t\tdesc: z.object({\r\n\t\t\trole: z.string().describe('用户在项目中的角色和职责'),\r\n\t\t\tcontribute: z.string().describe('用户的核心贡献和参与程度'),\r\n\t\t\tbgAndTarget: z.string().describe('项目的背景和目的')\r\n\t\t}),\r\n\t\ttechStack: z.array(z.string()).describe('项目的技术栈')\r\n\t})\r\n\t.describe('项目信息的结构化描述');\r\n\r\nfunction getLightspotSchemaForm(item: any = z.string()) {\r\n\treturn z\r\n\t\t.object({\r\n\t\t\tteam: z.array(item).describe('团队贡献方面的亮点'),\r\n\t\t\tskill: z.array(item).describe('技术亮点/难点方面的亮点'),\r\n\t\t\tuser: z.array(item).describe('用户体验/业务价值方面的亮点')\r\n\t\t})\r\n\t\t.describe('项目亮点的结构化描述');\r\n}\r\nconst projectSchemaForm = z.object({\r\n\tinfo: infoSchemaForm,\r\n\tlightspot: getLightspotSchemaForm()\r\n});\r\n\r\nexport { projectSchemaForm };\r\n","import { UserInfoFromToken } from './loginVerify';\r\nimport { ProjectDto } from './project';\r\n\r\n/* chunk的标准格式,其它observable返回的chunk都需要转换为该格式\r\n \t用于流式数据的sse传输和存储\r\n*/\r\nexport interface StreamingChunk {\r\n\tcontent: string; // 内容\r\n\treasonContent?: string; // 推理内容-r1\r\n\tdone: boolean; // 是否完成\r\n\tisReasoning?: boolean; // 是否是推理中-r1\r\n}\r\n\r\n/* 前端收到的chunk数据格式 */\r\nexport interface DataChunkVO {\r\n\tdata: StreamingChunk & {\r\n\t\tcached?: boolean; //是否命中llm缓存\r\n\t\texact?: boolean; //缓存命中类型 true: 相同 false:相似\r\n\t};\r\n}\r\n/* 前端收到的chunk数据格式-错误信息 */\r\nexport interface DataChunkErrVO {\r\n\tdata: {\r\n\t\terror: string;\r\n\t\tdone: true;\r\n\t};\r\n}\r\n\r\n/* 参数类型 */\r\nexport interface TRequestParams {\r\n\tpolish: {\r\n\t\tinput: ProjectDto;\r\n\t\ttarget: 'polish';\r\n\t};\r\n\tmine: {\r\n\t\tinput: ProjectDto;\r\n\t\ttarget: 'mine';\r\n\t};\r\n\tlookup: {\r\n\t\tinput: ProjectDto;\r\n\t\ttarget: 'lookup';\r\n\t};\r\n}\r\n\r\nexport const RequestTargetMap = {\r\n\tpolish: '/sse/project-generate', //类型占位符\r\n\tmine: '/sse/project-generate',\r\n\tlookup: '/sse/project-generate'\r\n};\r\n\r\n//用于创建llm-sse会话的context\r\nexport interface LLMSessionRequest {\r\n\tinput: any; //传入目标方法的输入\r\n\tuserInfo?: UserInfoFromToken; //由登录验证 Guard 注入的用户信息\r\n}\r\n//llm-sse会话创建成功后的响应\r\nexport interface LLMSessionResponse {\r\n\tsessionId: string;\r\n}\r\n//llm-sse会话状态\r\nexport interface LLMSessionStatusResponse {\r\n\t/*\r\n\t  服务端完成但客户端没完成、会话缓存没了（视为会话不存在）：'notfound' 前端应该新建会话\r\n    服务端和客户端都完成：'bothdone' 前端应该新建会话\r\n      \r\n    服务端完成但客户端没完成、会话缓存还在：'backdone' 前端应该请求断点续传\r\n\r\n    服务端和客户端都没完成、创建了任务：'running' 前端应该请求断点续传\r\n    服务端和客户端都没完成、没创建任务：'tasknotfound' 前端应该请求sse/generate接口创建任务\r\n\r\n\t */\r\n\tstatus: 'notfound' | 'bothdone' | 'backdone' | 'running' | 'tasknotfound';\r\n}\r\n","/**\r\n * 将llm返回的内容解析为JSON格式的对象\r\n */\r\nexport function jsonMd_obj(content: string) {\r\n\tlet jsonMd = content.match(/(?<=```json)(.*)(?=```)/gs)?.[0]; //.默认不匹配\\n\r\n\r\n\tif (!jsonMd) {\r\n\t\tconsole.error(`jsonMd_obj没找到json内容块,输入: ${content}`);\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet obj;\r\n\ttry {\r\n\t\tobj = JSON.parse(jsonMd);\r\n\t} catch (error) {\r\n\t\tconsole.error('jsonMd_obj JSON parsing error:', error);\r\n\t\tconsole.error('jsonMd_obj when parsing:', jsonMd);\r\n\t}\r\n\treturn obj;\r\n}\r\n","import { z } from 'zod';\r\nimport { projectSchemaForm } from '../types/project.schema-form';\r\nimport { type CreateSkillDto, type SkillItem } from '../types/skill';\r\n/**\r\n * 将项目的Markdown格式文本转换为符合projectSchemaForm的结构化数据\r\n * @param markdown 项目的Markdown格式文本\r\n * @returns 符合projectSchemaForm的结构化数据\r\n */\r\nexport function markdownToProjectSchema(markdown: string): z.infer<typeof projectSchemaForm> {\r\n\t// 初始化结果对象\r\n\tconst result: z.infer<typeof projectSchemaForm> = {\r\n\t\tinfo: {\r\n\t\t\tname: '',\r\n\t\t\tdesc: {\r\n\t\t\t\trole: '',\r\n\t\t\t\tcontribute: '',\r\n\t\t\t\tbgAndTarget: ''\r\n\t\t\t},\r\n\t\t\ttechStack: []\r\n\t\t},\r\n\t\tlightspot: {\r\n\t\t\tteam: [],\r\n\t\t\tskill: [],\r\n\t\t\tuser: []\r\n\t\t}\r\n\t};\r\n\t//移除所有注释和空行\r\n\tmarkdown = markdown.replace('<br />', '').replace(/^\\s*>\\s*(.+?)$/gm, '');\r\n\r\n\t// 处理项目名称\r\n\tconst nameMatch = markdown.match(/名称：(.+?)(?:\\n|$)/);\r\n\tif (nameMatch && nameMatch[1]) {\r\n\t\tresult.info.name = nameMatch[1].trim();\r\n\t}\r\n\r\n\t// 处理角色和职责\r\n\tconst roleMatch = markdown.match(/角色和职责：(.+?)(?:\\n|$)/);\r\n\tif (roleMatch && roleMatch[1]) {\r\n\t\tresult.info.desc.role = roleMatch[1].trim();\r\n\t}\r\n\r\n\t// 处理核心贡献\r\n\tconst contributeMatch = markdown.match(/核心贡献和参与程度：(.+?)(?:\\n|$)/);\r\n\tif (contributeMatch && contributeMatch[1]) {\r\n\t\tresult.info.desc.contribute = contributeMatch[1].trim();\r\n\t}\r\n\r\n\t// 处理项目背景和目的\r\n\tconst bgMatch = markdown.match(/背景和目的：(.+?)(?:\\n|$)/);\r\n\tif (bgMatch && bgMatch[1]) {\r\n\t\tresult.info.desc.bgAndTarget = bgMatch[1].trim();\r\n\t}\r\n\t// 处理技术栈\r\n\t//FIXME 为什么\"项目技术栈\\s*\"会匹配到断言内容,而\"项目技术栈\\s*?\"不会 ???\r\n\tconst techStackSection = markdown.match(/#### 1\\.3 项目技术栈\\s*?\\n([\\s\\S]*?)(?=\\n###|$)/);\r\n\tconsole.log('markdownToProjectSchema ~ techStackSection:', techStackSection);\r\n\tif (techStackSection && techStackSection[1]) {\r\n\t\tconst techStackText = techStackSection[1].trim();\r\n\t\t// 将逗号、顿号分隔的技术栈转为数组\r\n\t\tresult.info.techStack = techStackText.split(/[、,，\\s]+/).filter(Boolean);\r\n\t}\r\n\r\n\t// 处理团队贡献亮点\r\n\tconst teamSection = markdown.match(/#### 2\\.1 团队贡献\\s*([\\s\\S]*?)(?=\\n####|$)/);\r\n\tif (teamSection && teamSection[1]) {\r\n\t\t//! crepe编辑器中无序列表项 - 会转为 *: 统一用*,且会跟<br />\r\n\t\t// 提取所有以 \"*\" 或 \" * \" 开头的行\r\n\t\tconst teamPoints = teamSection[1].match(/^\\s*\\*\\s*(.+?)$/gm);\r\n\t\tif (teamPoints) {\r\n\t\t\tresult.lightspot.team = teamPoints.map(point =>\r\n\t\t\t\tpoint\r\n\t\t\t\t\t.replace('<br />', '')\r\n\t\t\t\t\t.replace(/^\\s*\\*\\s*/, '')\r\n\t\t\t\t\t.trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t// 处理技术亮点/难点\r\n\tconst skillSection = markdown.match(/#### 2\\.2 技术亮点\\/难点\\s*([\\s\\S]*?)(?=\\n####|$)/);\r\n\tif (skillSection && skillSection[1]) {\r\n\t\tconst skillPoints = skillSection[1].match(/^\\s*\\*\\s*(.+?)$/gm);\r\n\t\tif (skillPoints) {\r\n\t\t\tresult.lightspot.skill = skillPoints.map(point =>\r\n\t\t\t\tpoint\r\n\t\t\t\t\t.replace('<br />', '')\r\n\t\t\t\t\t.replace(/^\\s*\\*\\s*/, '')\r\n\t\t\t\t\t.trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t// 处理用户体验/业务价值\r\n\tconst userSection = markdown.match(/#### 2\\.3 用户体验\\/业务价值\\s*([\\s\\S]*?)(?=\\n####|$)/);\r\n\tif (userSection && userSection[1]) {\r\n\t\tconst userPoints = userSection[1].match(/^\\s*\\*\\s*(.+?)$/gm);\r\n\t\tif (userPoints) {\r\n\t\t\tresult.lightspot.user = userPoints.map(point =>\r\n\t\t\t\tpoint\r\n\t\t\t\t\t.replace('<br />', '')\r\n\t\t\t\t\t.replace(/^\\s*\\*\\s*/, '')\r\n\t\t\t\t\t.trim()\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * 将项目schema对象转换回Markdown格式\r\n * @param project 项目结构化数据\r\n * @returns Markdown格式文本\r\n */\r\nexport function projectSchemaToMarkdown(project: z.infer<typeof projectSchemaForm>): string {\r\n\tlet markdown = `### 1、项目信息\\n\\n`;\r\n\r\n\t// 基本信息\r\n\tmarkdown += `#### 1.1 基本信息\\n\\n`;\r\n\tmarkdown += `* 名称：${project.info.name}\\n\\n`;\r\n\r\n\t// 项目介绍\r\n\tmarkdown += `#### 1.2 项目介绍\\n\\n`;\r\n\tmarkdown += `* 角色和职责：${project.info.desc.role}\\n`;\r\n\tmarkdown += `* 核心贡献和参与程度：${project.info.desc.contribute}\\n`;\r\n\tmarkdown += `* 背景和目的：${project.info.desc.bgAndTarget}\\n\\n`;\r\n\r\n\t// 技术栈\r\n\tmarkdown += `#### 1.3 项目技术栈\\n\\n`;\r\n\tmarkdown += `${project.info.techStack.join('、')}\\n\\n`;\r\n\r\n\t// 亮点\r\n\tmarkdown += `### 2、亮点\\n\\n`;\r\n\r\n\t// 团队贡献\r\n\tmarkdown += `#### 2.1 团队贡献\\n`;\r\n\tproject.lightspot.team.forEach(item => {\r\n\t\tmarkdown += `  * ${item}\\n`;\r\n\t});\r\n\r\n\t// 技术亮点\r\n\tmarkdown += `#### 2.2 技术亮点/难点\\n`;\r\n\tproject.lightspot.skill.forEach(item => {\r\n\t\tmarkdown += `  * ${item}\\n`;\r\n\t});\r\n\r\n\t// 用户体验\r\n\tmarkdown += `#### 2.3 用户体验/业务价值\\n`;\r\n\tproject.lightspot.user.forEach(item => {\r\n\t\tmarkdown += `  * ${item}\\n`;\r\n\t});\r\n\r\n\treturn markdown;\r\n}\r\n\r\n// 将技能数据转换为 Markdown\r\nexport const skillsToMarkdown = (data: CreateSkillDto): string => {\r\n\tlet markdown = '## 职业技能\\n\\n';\r\n\r\n\tdata.content.forEach(skillGroup => {\r\n\t\tif (skillGroup.type) {\r\n\t\t\tmarkdown += `* ${skillGroup.type}:`;\r\n\t\t\tif (skillGroup.content && skillGroup.content.length > 0) {\r\n\t\t\t\tmarkdown += ` ${skillGroup.content.join('、')}\\n`;\r\n\t\t\t} else {\r\n\t\t\t\tmarkdown += '\\n';\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn markdown;\r\n};\r\n\r\n// 将 Markdown 转换为技能数据\r\nexport const markdownToSkills = (markdown: string): CreateSkillDto => {\r\n\tconst content: SkillItem[] = [];\r\n\r\n\t// 使用正则表达式匹配所有技能块，从 * 开始到下一个 * 或字符串结尾\r\n\tconst skillBlockRegex = /\\*\\s*([^*]+?)(?=\\*|$)/gs;\r\n\tconst matches = markdown.matchAll(skillBlockRegex);\r\n\r\n\tfor (const match of matches) {\r\n\t\tconst blockContent = match[1];\r\n\t\tif (!blockContent) continue;\r\n\r\n\t\t// 移除所有换行符\r\n\t\tconst cleanedContent = blockContent.replace(/\\n+/g, '').trim();\r\n\r\n\t\tconst colonMatch = cleanedContent.match(/^([^:：]+)[：:](.*)$/);\r\n\r\n\t\tif (colonMatch) {\r\n\t\t\tconst type = colonMatch[1].trim();\r\n\t\t\tconst skillsString = colonMatch[2].trim();\r\n\r\n\t\t\tif (type) {\r\n\t\t\t\t// 解析技能列表，支持多种分隔符\r\n\t\t\t\tconst skills = skillsString\r\n\t\t\t\t\t? skillsString\r\n\t\t\t\t\t\t\t.split(/[、，,]/)\r\n\t\t\t\t\t\t\t.map(skill => skill.trim())\r\n\t\t\t\t\t\t\t.filter(skill => skill.length > 0)\r\n\t\t\t\t\t: [];\r\n\r\n\t\t\t\tcontent.push({\r\n\t\t\t\t\ttype,\r\n\t\t\t\t\tcontent: skills\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// 如果没有解析到任何内容，返回默认结构\r\n\tif (content.length === 0) {\r\n\t\treturn {\r\n\t\t\tcontent: [\r\n\t\t\t\t{ type: '前端', content: [] },\r\n\t\t\t\t{ type: '后端', content: [] },\r\n\t\t\t\t{ type: '数据库', content: [] }\r\n\t\t\t]\r\n\t\t};\r\n\t}\r\n\r\n\treturn { content };\r\n};\r\n"],"mappings":"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","names":["ErrorCode","KnowledgeTypeEnum","FileTypeEnum","ProjectStatus","import_zod","import_zod"]}