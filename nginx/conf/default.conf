# log_format csp_report '$remote_addr - $remote_user [$time_local] '
#                     '"$request" $status $body_bytes_sent '
#                     '"$http_referer" "$http_user_agent"';
server {
    listen 80;
    server_name localhost;  # 或您的实际域名

    # --- 前端静态资源服务 ---
    # 设置前端静态文件目录
    root /usr/share/nginx/html;
    index index.html;

    # 为 Vite 构建的 /assets 目录添加一个专门的 location 块。
    # 这可以防止对 JS/CSS 等资源的请求错误地回退到 index.html，并允许我们为其设置更合适的缓存策略。
    # 因为这个 location 更具体，它会优先于 "location /" 被匹配。
    location /assets/ {
        # 为静态资源设置长期缓存，因为它们的文件名中通常带有哈希值，内容改变时文件名也会改变。
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    location / {
        try_files $uri $uri/ /index.html;  # 支持前端路由
    }

    # --- 后端 API 代理 ---
    location /api/ {
        proxy_pass http://backend:3003/;  # 转发到后端服务
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # --- MinIO OSS 代理 ---
    location /oss/ {
        # 重写URL，去掉/oss/前缀
        # 例如 /oss/bucket/object -> /bucket/object
        rewrite ^/oss/(.*)$ /$1 break;
        
        proxy_pass http://minio-container:9000;
        
        # 转换为 minio生成的预签名URL
        proxy_set_header Host "nginx-container";
        
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 用于支持流式上传
        proxy_set_header Connection ""; # nginx作为管道
        proxy_http_version 1.1;# 确保长连接
    }

    # --- 安全配置 ---
    add_header X-Content-Type-Options nosniff; # 防止浏览器进行 MIME 类型嗅探
    add_header X-XSS-Protection "1; mode=block";# 启用浏览器的 XSS 防御功能（主要用于旧浏览器,现代浏览器已内置 XSS 防护）
    add_header X-Frame-Options "DENY";# 禁止被其他网站嵌入, 防止点击劫持

    # --- CSP ---
    # 设置策略, 先Report-Only开启监控, 生产环境再执行策略
    # 在 Nginx 中复用 request_id 作为 nonce
    # set $nonce $request_id;
    # add_header Content-Security-Policy-Report-Only "
    #     default-src 'self';
    #     script-src 'self' 'nonce-$nonce' 'strict-dynamic';
    #     style-src 'self' 'nonce-$nonce';
    #     img-src 'self' data: https:;
    #     font-src 'self' https://fonts.googleapis.com;
    #     connect-src 'self';
    #     frame-ancestors 'none';
    #     report-uri /csp-report;
    # ";
    # 储存违规报告
    # location /csp-report {
    #     # 允许 POST 请求
    #     if ($request_method != POST) {
    #         return 405;
    #     }

    #     # 记录到日志
    #     access_log /var/log/nginx/csp-reports.log;
    #     # access_log /var/log/nginx/csp-reports.log csp_report;

    #     # 返回 204 状态码（无内容）
    #     return 204;
    # }

    # --- 缓存策略 ---
    # 1. 静态资源缓存(长期缓存)
    # 2. CSS 和 JavaScript 文件(短期缓存)
    # 3. 字体文件(长期缓存)
    # 4. HTML 文件（不缓存）
    # 5. API 响应（不缓存）
    # 6. 动态内容（不缓存）

    # location ~* \.(jpg|jpeg|gif|png|ico|webp|svg)$ {
    #     expires 30d;
    #     add_header Cache-Control "public, no-transform";
    #     access_log off;
    # }

    # location ~* \.(css|js)$ {
    #     expires 7d;
    #     add_header Cache-Control "public, no-transform";
    # }

    # location ~* \.(woff|woff2|ttf|otf|eot)$ {
    #     expires 30d;
    #     add_header Cache-Control "public, no-transform";
    #     access_log off;
    # }

    # location ~* \.html$ {
    #     expires -1;
    #     add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    # }

    # location /api/ {
    #     expires -1;
    #     add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    #     add_header Pragma "no-cache";
    # }

    # location ~* \.(php|jsp|asp|aspx)$ {
    #     expires -1;
    #     add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    #     add_header Pragma "no-cache";
    # }

    # --- gzip 压缩 ---
    gzip on;
    
    # 设置压缩级别（1-9，数字越大压缩率越高，但 CPU 消耗也越大）
    gzip_comp_level 6;
    
    # 设置压缩的最小文件大小
    gzip_min_length 1k;
    
    # 设置压缩缓冲区大小
    gzip_buffers 4 16k;
    
    # 设置压缩的 HTTP 版本
    gzip_http_version 1.1;
    
    # 设置压缩的 MIME 类型
    gzip_types
        text/plain
        text/css
        text/javascript
        application/javascript
        application/json
        application/xml
        application/x-httpd-php
        image/jpeg
        image/gif
        image/png
        image/svg+xml;
    
    # 是否在 HTTP/1.0 请求中启用 gzip
    gzip_proxied any;
    
    # 添加 Vary 头，告诉代理服务器根据 Accept-Encoding 头缓存不同版本
    gzip_vary on;
    
    # 禁用 IE6 及以下版本的 gzip
    gzip_disable "MSIE [1-6]\.";
}

